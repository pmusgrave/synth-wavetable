ARM GAS  /tmp/ccn1DpdY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB137:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "midi.h"
  27:Src/main.c    **** #include "waves.h"
  28:Src/main.c    **** #include <math.h>
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccn1DpdY.s 			page 2


  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** #define DDS_SCALE_FACTOR 89.4745833
  39:Src/main.c    **** #define VOICES 16
  40:Src/main.c    **** #define NOT_TRIGGERED 0
  41:Src/main.c    **** #define ATTACK_MODE 1
  42:Src/main.c    **** #define DECAY_MODE 2
  43:Src/main.c    **** #define SUSTAIN_MODE 3
  44:Src/main.c    **** #define RELEASE_MODE 4
  45:Src/main.c    **** /* USER CODE END PD */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  48:Src/main.c    **** /* USER CODE BEGIN PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END PM */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** DAC_HandleTypeDef hdac;
  54:Src/main.c    **** 
  55:Src/main.c    **** SPI_HandleTypeDef hspi5;
  56:Src/main.c    **** 
  57:Src/main.c    **** TIM_HandleTypeDef htim6;
  58:Src/main.c    **** TIM_HandleTypeDef htim7;
  59:Src/main.c    **** 
  60:Src/main.c    **** UART_HandleTypeDef huart1;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** uint8_t spi_tx_buffer[3];
  64:Src/main.c    **** uint8_t spi_rx_buffer[3];
  65:Src/main.c    **** const float inv_voices = 1.0/VOICES;
  66:Src/main.c    **** // probably need to refactor these SPI flags
  67:Src/main.c    **** volatile uint8_t note_on_flag = 0;
  68:Src/main.c    **** volatile uint8_t note_off_flag = 0;
  69:Src/main.c    **** volatile uint8_t attack_cc_flag = 0;
  70:Src/main.c    **** volatile uint8_t decay_cc_flag = 0;
  71:Src/main.c    **** volatile uint8_t sustain_cc_flag = 0;
  72:Src/main.c    **** volatile uint8_t release_cc_flag = 0;
  73:Src/main.c    **** 
  74:Src/main.c    **** volatile struct midi_msg current_midi_msg = {0,0,0,0};
  75:Src/main.c    **** volatile uint32_t phase_accumulator[VOICES] = {0};
  76:Src/main.c    **** volatile uint8_t output_val = 0;
  77:Src/main.c    **** volatile uint32_t envelope_index[VOICES] = {0};
  78:Src/main.c    **** volatile float envelope[VOICES] = {0};
  79:Src/main.c    **** volatile uint8_t env_state[VOICES];
  80:Src/main.c    **** volatile uint8_t note_on[88] = {0};
  81:Src/main.c    **** volatile uint8_t note_freq[VOICES] = {0};
  82:Src/main.c    **** 
  83:Src/main.c    **** volatile uint32_t lfo_phase_accumulator[VOICES] = {0};
  84:Src/main.c    **** volatile uint16_t lfo_freq[VOICES] = {0};
  85:Src/main.c    **** volatile uint8_t lfo[VOICES] = {0};
  86:Src/main.c    **** 
  87:Src/main.c    **** volatile uint8_t update_value_flag = 0;
  88:Src/main.c    **** volatile uint8_t MIDI_flag = 0;
  89:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 3


  90:Src/main.c    **** #define MAX_QUEUE_SIZE 255
  91:Src/main.c    **** struct msg_queue {
  92:Src/main.c    ****   uint8_t head;
  93:Src/main.c    ****   uint8_t tail;
  94:Src/main.c    ****   struct midi_msg queue[MAX_QUEUE_SIZE];
  95:Src/main.c    **** } midi_msg_queue;
  96:Src/main.c    **** void enqueue(struct midi_msg midi_msg);
  97:Src/main.c    **** struct midi_msg dequeue(void);
  98:Src/main.c    **** 
  99:Src/main.c    **** struct byte_queue {
 100:Src/main.c    ****   uint8_t head;
 101:Src/main.c    ****   uint8_t tail;
 102:Src/main.c    ****   uint8_t queue[MAX_QUEUE_SIZE];
 103:Src/main.c    **** } byte_queue;
 104:Src/main.c    **** void enqueue_byte(uint8_t);
 105:Src/main.c    **** uint8_t dequeue_byte(void);
 106:Src/main.c    **** 
 107:Src/main.c    **** uint8_t attack = 255;
 108:Src/main.c    **** uint8_t decay = 255;
 109:Src/main.c    **** uint8_t sustain = 200;
 110:Src/main.c    **** uint8_t release = 255;
 111:Src/main.c    **** /* USER CODE END PV */
 112:Src/main.c    **** 
 113:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 114:Src/main.c    **** void SystemClock_Config(void);
 115:Src/main.c    **** static void MX_GPIO_Init(void);
 116:Src/main.c    **** static void MX_SPI5_Init(void);
 117:Src/main.c    **** static void MX_USART1_UART_Init(void);
 118:Src/main.c    **** static void MX_DAC_Init(void);
 119:Src/main.c    **** static void MX_TIM6_Init(void);
 120:Src/main.c    **** static void MX_TIM7_Init(void);
 121:Src/main.c    **** /* USER CODE BEGIN PFP */
 122:Src/main.c    **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
 123:Src/main.c    **** void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi);
 124:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
 125:Src/main.c    **** void UpdateOutputValue(void);
 126:Src/main.c    **** void UpdateLFOs(void);
 127:Src/main.c    **** void UpdateEnvelope(void);
 128:Src/main.c    **** void Update_R2R_DAC(void);
 129:Src/main.c    **** void UART_PrintADSR(void);
 130:Src/main.c    **** /* USER CODE END PFP */
 131:Src/main.c    **** 
 132:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 133:Src/main.c    **** /* USER CODE BEGIN 0 */
 134:Src/main.c    **** 
 135:Src/main.c    **** /* USER CODE END 0 */
 136:Src/main.c    **** 
 137:Src/main.c    **** /**
 138:Src/main.c    ****   * @brief  The application entry point.
 139:Src/main.c    ****   * @retval int
 140:Src/main.c    ****   */
 141:Src/main.c    **** int main(void)
 142:Src/main.c    **** {
 143:Src/main.c    ****   /* USER CODE BEGIN 1 */
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* USER CODE END 1 */
 146:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 4


 147:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 150:Src/main.c    ****   HAL_Init();
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE BEGIN Init */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* USER CODE END Init */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* Configure the system clock */
 157:Src/main.c    ****   SystemClock_Config();
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* USER CODE END SysInit */
 162:Src/main.c    **** 
 163:Src/main.c    ****   /* Initialize all configured peripherals */
 164:Src/main.c    ****   MX_GPIO_Init();
 165:Src/main.c    ****   MX_SPI5_Init();
 166:Src/main.c    ****   MX_USART1_UART_Init();
 167:Src/main.c    ****   MX_DAC_Init();
 168:Src/main.c    ****   MX_TIM6_Init();
 169:Src/main.c    ****   MX_TIM7_Init();
 170:Src/main.c    ****   /* USER CODE BEGIN 2 */
 171:Src/main.c    ****   init_wavetable();
 172:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim6);
 173:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim7);
 174:Src/main.c    ****   HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 175:Src/main.c    **** 
 176:Src/main.c    ****   for(int i = 0; i < VOICES; i++) {
 177:Src/main.c    ****     env_state[i] = NOT_TRIGGERED;
 178:Src/main.c    ****     note_on[i] = MIDI_NOTE_OFF;
 179:Src/main.c    ****     note_freq[i] = 0;
 180:Src/main.c    ****     lfo_freq[i] = 20;
 181:Src/main.c    ****   }
 182:Src/main.c    **** 
 183:Src/main.c    ****   /*
 184:Src/main.c    ****   note_on[0] = MIDI_NOTE_ON;
 185:Src/main.c    ****   note_freq[0] = 50;
 186:Src/main.c    ****   env_state[0] = ATTACK_MODE;
 187:Src/main.c    **** 
 188:Src/main.c    ****   note_on[1] = MIDI_NOTE_ON;
 189:Src/main.c    ****   note_freq[1] = 54;
 190:Src/main.c    ****   env_state[1] = ATTACK_MODE;
 191:Src/main.c    **** 
 192:Src/main.c    ****   note_on[2] = MIDI_NOTE_ON;
 193:Src/main.c    ****   note_freq[2] = 57;
 194:Src/main.c    ****   env_state[2] = ATTACK_MODE;
 195:Src/main.c    **** 
 196:Src/main.c    ****   note_on[3] = MIDI_NOTE_ON;
 197:Src/main.c    ****   note_freq[3] = 62;
 198:Src/main.c    ****   env_state[3] = ATTACK_MODE;
 199:Src/main.c    ****   */
 200:Src/main.c    **** 
 201:Src/main.c    **** 
 202:Src/main.c    ****   uint8_t init_msg[20] = {"\nSTM32F429!\n"};
 203:Src/main.c    ****   HAL_UART_Transmit(&huart1, init_msg, 20, 50);
ARM GAS  /tmp/ccn1DpdY.s 			page 5


 204:Src/main.c    **** 
 205:Src/main.c    ****   /* USER CODE END 2 */
 206:Src/main.c    **** 
 207:Src/main.c    ****   /* Infinite loop */
 208:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 209:Src/main.c    ****   uint8_t process_msg_flag  = 0;
 210:Src/main.c    ****   while (1)
 211:Src/main.c    ****   {
 212:Src/main.c    ****     Receive_MIDI(&hspi5, spi_rx_buffer);
 213:Src/main.c    **** 
 214:Src/main.c    ****     if(midi_msg_queue.head != midi_msg_queue.tail) {
 215:Src/main.c    ****       current_midi_msg = dequeue();
 216:Src/main.c    ****       process_msg_flag = 1;
 217:Src/main.c    ****     }
 218:Src/main.c    **** 
 219:Src/main.c    ****     if(MIDI_flag) {
 220:Src/main.c    ****       MIDI_flag = 0;
 221:Src/main.c    **** 
 222:Src/main.c    ****       if(byte_queue.head != byte_queue.tail) {
 223:Src/main.c    ****         uint8_t value = dequeue_byte();
 224:Src/main.c    **** 
 225:Src/main.c    ****         switch(value) {
 226:Src/main.c    ****         case MIDI_NOTE_ON:
 227:Src/main.c    ****           note_on_flag = 1;
 228:Src/main.c    ****           break;
 229:Src/main.c    ****         case MIDI_NOTE_OFF:
 230:Src/main.c    ****           note_off_flag = 1;
 231:Src/main.c    ****           break;
 232:Src/main.c    ****         case ATTACK_CC:
 233:Src/main.c    ****           attack_cc_flag = 1;
 234:Src/main.c    ****           break;
 235:Src/main.c    ****         case DECAY_CC:
 236:Src/main.c    ****           decay_cc_flag = 1;
 237:Src/main.c    ****           break;
 238:Src/main.c    ****         case SUSTAIN_CC:
 239:Src/main.c    ****           sustain_cc_flag = 1;
 240:Src/main.c    ****           break;
 241:Src/main.c    ****         case RELEASE_CC:
 242:Src/main.c    ****           release_cc_flag = 1;
 243:Src/main.c    ****           break;
 244:Src/main.c    ****         default:
 245:Src/main.c    ****           if(note_on_flag){
 246:Src/main.c    ****         struct midi_msg new_midi_note_msg = {
 247:Src/main.c    ****           MIDI_NOTE_ON,
 248:Src/main.c    ****           spi_rx_buffer[0],
 249:Src/main.c    ****           127,
 250:Src/main.c    ****           0
 251:Src/main.c    ****         };
 252:Src/main.c    ****         enqueue(new_midi_note_msg);
 253:Src/main.c    ****         note_on_flag = 0;
 254:Src/main.c    ****       }
 255:Src/main.c    ****       else if(note_off_flag){
 256:Src/main.c    ****         struct midi_msg new_midi_note_msg = {
 257:Src/main.c    ****           MIDI_NOTE_OFF,
 258:Src/main.c    ****           spi_rx_buffer[0],
 259:Src/main.c    ****           0,
 260:Src/main.c    ****           0
ARM GAS  /tmp/ccn1DpdY.s 			page 6


 261:Src/main.c    ****         };
 262:Src/main.c    ****         enqueue(new_midi_note_msg);
 263:Src/main.c    ****         note_off_flag = 0;
 264:Src/main.c    ****       }
 265:Src/main.c    ****       else if(attack_cc_flag){
 266:Src/main.c    ****         struct midi_msg new_cc = {
 267:Src/main.c    ****           ATTACK_CC,
 268:Src/main.c    ****           spi_rx_buffer[0],
 269:Src/main.c    ****           0,
 270:Src/main.c    ****           0
 271:Src/main.c    ****         };
 272:Src/main.c    ****         enqueue(new_cc);
 273:Src/main.c    ****         attack_cc_flag = 0;
 274:Src/main.c    ****         UART_PrintADSR();
 275:Src/main.c    ****       }
 276:Src/main.c    ****       else if(decay_cc_flag){
 277:Src/main.c    ****         struct midi_msg new_cc = {
 278:Src/main.c    ****           DECAY_CC,
 279:Src/main.c    ****           spi_rx_buffer[0],
 280:Src/main.c    ****           0,
 281:Src/main.c    ****           0
 282:Src/main.c    ****         };
 283:Src/main.c    ****         enqueue(new_cc);
 284:Src/main.c    ****         decay_cc_flag = 0;
 285:Src/main.c    ****         UART_PrintADSR();
 286:Src/main.c    ****       }
 287:Src/main.c    ****       else if(sustain_cc_flag){
 288:Src/main.c    ****         struct midi_msg new_cc = {
 289:Src/main.c    ****           SUSTAIN_CC,
 290:Src/main.c    ****           spi_rx_buffer[0],
 291:Src/main.c    ****           0,
 292:Src/main.c    ****           0
 293:Src/main.c    ****         };
 294:Src/main.c    ****         enqueue(new_cc);
 295:Src/main.c    ****         sustain_cc_flag = 0;
 296:Src/main.c    ****         UART_PrintADSR();
 297:Src/main.c    ****       }
 298:Src/main.c    ****       else if(release_cc_flag){
 299:Src/main.c    ****         struct midi_msg new_cc = {
 300:Src/main.c    ****           RELEASE_CC,
 301:Src/main.c    ****           spi_rx_buffer[0],
 302:Src/main.c    ****           0,
 303:Src/main.c    ****           0
 304:Src/main.c    ****         };
 305:Src/main.c    ****         enqueue(new_cc);
 306:Src/main.c    ****         release_cc_flag = 0;
 307:Src/main.c    ****         UART_PrintADSR();
 308:Src/main.c    ****       }
 309:Src/main.c    ****       else {
 310:Src/main.c    **** 
 311:Src/main.c    ****       }
 312:Src/main.c    ****           break;
 313:Src/main.c    ****         }
 314:Src/main.c    ****       }
 315:Src/main.c    **** 
 316:Src/main.c    **** 
 317:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 7


 318:Src/main.c    ****     }
 319:Src/main.c    **** 
 320:Src/main.c    ****     if(process_msg_flag) {
 321:Src/main.c    ****       process_msg_flag = 0;
 322:Src/main.c    ****       switch(current_midi_msg.byte0) {
 323:Src/main.c    ****       case MIDI_NOTE_ON:
 324:Src/main.c    ****         for (int i = 0; i < VOICES; i++) {
 325:Src/main.c    ****           if(note_on[i] == MIDI_NOTE_OFF){
 326:Src/main.c    ****             note_on[i] = MIDI_NOTE_ON;
 327:Src/main.c    ****             note_freq[i] = current_midi_msg.byte1;
 328:Src/main.c    ****             env_state[i] = ATTACK_MODE;
 329:Src/main.c    ****             break;
 330:Src/main.c    ****           }
 331:Src/main.c    ****         }
 332:Src/main.c    ****         break;
 333:Src/main.c    ****       case MIDI_NOTE_OFF:
 334:Src/main.c    ****         for (int i = 0; i < VOICES; i++) {
 335:Src/main.c    ****           if (note_on[i] == MIDI_NOTE_ON && note_freq[i] == current_midi_msg.byte1){
 336:Src/main.c    ****             //note_on[i] = MIDI_NOTE_OFF;
 337:Src/main.c    ****             env_state[i] = RELEASE_MODE;
 338:Src/main.c    ****           }
 339:Src/main.c    ****         }
 340:Src/main.c    ****         break;
 341:Src/main.c    ****       case ATTACK_CC:
 342:Src/main.c    ****         attack = current_midi_msg.byte1;
 343:Src/main.c    ****         break;
 344:Src/main.c    ****       case DECAY_CC:
 345:Src/main.c    ****         decay = current_midi_msg.byte1;
 346:Src/main.c    ****         break;
 347:Src/main.c    ****       case SUSTAIN_CC:
 348:Src/main.c    ****         sustain = current_midi_msg.byte1;
 349:Src/main.c    ****         break;
 350:Src/main.c    ****       case RELEASE_CC:
 351:Src/main.c    ****         release = current_midi_msg.byte1;
 352:Src/main.c    ****         break;
 353:Src/main.c    **** 
 354:Src/main.c    ****       }
 355:Src/main.c    ****     }
 356:Src/main.c    **** 
 357:Src/main.c    ****     if(update_value_flag) {
 358:Src/main.c    ****       //      __disable_irq();
 359:Src/main.c    ****       UpdateEnvelope();
 360:Src/main.c    ****       UpdateLFOs();
 361:Src/main.c    ****       UpdateOutputValue();
 362:Src/main.c    ****       HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, output_val);
 363:Src/main.c    ****       update_value_flag = 0;
 364:Src/main.c    ****       //      __enable_irq();
 365:Src/main.c    ****     }
 366:Src/main.c    **** 
 367:Src/main.c    ****     //Update_R2R_DAC();
 368:Src/main.c    **** 
 369:Src/main.c    ****     /* USER CODE END WHILE */
 370:Src/main.c    **** 
 371:Src/main.c    ****     /* USER CODE BEGIN 3 */
 372:Src/main.c    ****   }
 373:Src/main.c    ****   /* USER CODE END 3 */
 374:Src/main.c    **** }
ARM GAS  /tmp/ccn1DpdY.s 			page 8


 375:Src/main.c    **** 
 376:Src/main.c    **** /**
 377:Src/main.c    ****   * @brief System Clock Configuration
 378:Src/main.c    ****   * @retval None
 379:Src/main.c    ****   */
 380:Src/main.c    **** void SystemClock_Config(void)
 381:Src/main.c    **** {
 382:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 383:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 384:Src/main.c    **** 
 385:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 386:Src/main.c    ****   */
 387:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 388:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 389:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 390:Src/main.c    ****   */
 391:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 392:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 393:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 394:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 395:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 396:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 397:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 100;
 398:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 399:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 400:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 401:Src/main.c    ****   {
 402:Src/main.c    ****     Error_Handler();
 403:Src/main.c    ****   }
 404:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 405:Src/main.c    ****   */
 406:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 407:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 408:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 409:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 410:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 411:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 412:Src/main.c    **** 
 413:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 414:Src/main.c    ****   {
 415:Src/main.c    ****     Error_Handler();
 416:Src/main.c    ****   }
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** /**
 420:Src/main.c    ****   * @brief DAC Initialization Function
 421:Src/main.c    ****   * @param None
 422:Src/main.c    ****   * @retval None
 423:Src/main.c    ****   */
 424:Src/main.c    **** static void MX_DAC_Init(void)
 425:Src/main.c    **** {
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* USER CODE BEGIN DAC_Init 0 */
 428:Src/main.c    **** 
 429:Src/main.c    ****   /* USER CODE END DAC_Init 0 */
 430:Src/main.c    **** 
 431:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/ccn1DpdY.s 			page 9


 432:Src/main.c    **** 
 433:Src/main.c    ****   /* USER CODE BEGIN DAC_Init 1 */
 434:Src/main.c    **** 
 435:Src/main.c    ****   /* USER CODE END DAC_Init 1 */
 436:Src/main.c    ****   /** DAC Initialization 
 437:Src/main.c    ****   */
 438:Src/main.c    ****   hdac.Instance = DAC;
 439:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 440:Src/main.c    ****   {
 441:Src/main.c    ****     Error_Handler();
 442:Src/main.c    ****   }
 443:Src/main.c    ****   /** DAC channel OUT2 config 
 444:Src/main.c    ****   */
 445:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 446:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 447:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 448:Src/main.c    ****   {
 449:Src/main.c    ****     Error_Handler();
 450:Src/main.c    ****   }
 451:Src/main.c    ****   /* USER CODE BEGIN DAC_Init 2 */
 452:Src/main.c    **** 
 453:Src/main.c    ****   /* USER CODE END DAC_Init 2 */
 454:Src/main.c    **** 
 455:Src/main.c    **** }
 456:Src/main.c    **** 
 457:Src/main.c    **** /**
 458:Src/main.c    ****   * @brief SPI5 Initialization Function
 459:Src/main.c    ****   * @param None
 460:Src/main.c    ****   * @retval None
 461:Src/main.c    ****   */
 462:Src/main.c    **** static void MX_SPI5_Init(void)
 463:Src/main.c    **** {
 464:Src/main.c    **** 
 465:Src/main.c    ****   /* USER CODE BEGIN SPI5_Init 0 */
 466:Src/main.c    **** 
 467:Src/main.c    ****   /* USER CODE END SPI5_Init 0 */
 468:Src/main.c    **** 
 469:Src/main.c    ****   /* USER CODE BEGIN SPI5_Init 1 */
 470:Src/main.c    **** 
 471:Src/main.c    ****   /* USER CODE END SPI5_Init 1 */
 472:Src/main.c    ****   /* SPI5 parameter configuration*/
 473:Src/main.c    ****   hspi5.Instance = SPI5;
 474:Src/main.c    ****   hspi5.Init.Mode = SPI_MODE_SLAVE;
 475:Src/main.c    ****   hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 476:Src/main.c    ****   hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 477:Src/main.c    ****   hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 478:Src/main.c    ****   hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 479:Src/main.c    ****   hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 480:Src/main.c    ****   hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 481:Src/main.c    ****   hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 482:Src/main.c    ****   hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 483:Src/main.c    ****   hspi5.Init.CRCPolynomial = 10;
 484:Src/main.c    ****   if (HAL_SPI_Init(&hspi5) != HAL_OK)
 485:Src/main.c    ****   {
 486:Src/main.c    ****     Error_Handler();
 487:Src/main.c    ****   }
 488:Src/main.c    ****   /* USER CODE BEGIN SPI5_Init 2 */
ARM GAS  /tmp/ccn1DpdY.s 			page 10


 489:Src/main.c    **** 
 490:Src/main.c    ****   /* USER CODE END SPI5_Init 2 */
 491:Src/main.c    **** 
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /**
 495:Src/main.c    ****   * @brief TIM6 Initialization Function
 496:Src/main.c    ****   * @param None
 497:Src/main.c    ****   * @retval None
 498:Src/main.c    ****   */
 499:Src/main.c    **** static void MX_TIM6_Init(void)
 500:Src/main.c    **** {
 501:Src/main.c    **** 
 502:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 0 */
 503:Src/main.c    **** 
 504:Src/main.c    ****   /* USER CODE END TIM6_Init 0 */
 505:Src/main.c    **** 
 506:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 507:Src/main.c    **** 
 508:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 1 */
 509:Src/main.c    **** 
 510:Src/main.c    ****   /* USER CODE END TIM6_Init 1 */
 511:Src/main.c    ****   htim6.Instance = TIM6;
 512:Src/main.c    ****   htim6.Init.Prescaler = 0;
 513:Src/main.c    ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 514:Src/main.c    ****   htim6.Init.Period = 1290;
 515:Src/main.c    ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 516:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 517:Src/main.c    ****   {
 518:Src/main.c    ****     Error_Handler();
 519:Src/main.c    ****   }
 520:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 521:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 522:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 523:Src/main.c    ****   {
 524:Src/main.c    ****     Error_Handler();
 525:Src/main.c    ****   }
 526:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 2 */
 527:Src/main.c    **** 
 528:Src/main.c    ****   /* USER CODE END TIM6_Init 2 */
 529:Src/main.c    **** 
 530:Src/main.c    **** }
 531:Src/main.c    **** 
 532:Src/main.c    **** /**
 533:Src/main.c    ****   * @brief TIM7 Initialization Function
 534:Src/main.c    ****   * @param None
 535:Src/main.c    ****   * @retval None
 536:Src/main.c    ****   */
 537:Src/main.c    **** static void MX_TIM7_Init(void)
 538:Src/main.c    **** {
 539:Src/main.c    **** 
 540:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 0 */
 541:Src/main.c    **** 
 542:Src/main.c    ****   /* USER CODE END TIM7_Init 0 */
 543:Src/main.c    **** 
 544:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 545:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 11


 546:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 1 */
 547:Src/main.c    **** 
 548:Src/main.c    ****   /* USER CODE END TIM7_Init 1 */
 549:Src/main.c    ****   htim7.Instance = TIM7;
 550:Src/main.c    ****   htim7.Init.Prescaler = 0;
 551:Src/main.c    ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 552:Src/main.c    ****   htim7.Init.Period = 10000;
 553:Src/main.c    ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 554:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 555:Src/main.c    ****   {
 556:Src/main.c    ****     Error_Handler();
 557:Src/main.c    ****   }
 558:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 559:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 560:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 561:Src/main.c    ****   {
 562:Src/main.c    ****     Error_Handler();
 563:Src/main.c    ****   }
 564:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 2 */
 565:Src/main.c    **** 
 566:Src/main.c    ****   /* USER CODE END TIM7_Init 2 */
 567:Src/main.c    **** 
 568:Src/main.c    **** }
 569:Src/main.c    **** 
 570:Src/main.c    **** /**
 571:Src/main.c    ****   * @brief USART1 Initialization Function
 572:Src/main.c    ****   * @param None
 573:Src/main.c    ****   * @retval None
 574:Src/main.c    ****   */
 575:Src/main.c    **** static void MX_USART1_UART_Init(void)
 576:Src/main.c    **** {
 577:Src/main.c    **** 
 578:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 579:Src/main.c    **** 
 580:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 581:Src/main.c    **** 
 582:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 585:Src/main.c    ****   huart1.Instance = USART1;
 586:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 587:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 588:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 589:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 590:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 591:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 592:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 593:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 594:Src/main.c    ****   {
 595:Src/main.c    ****     Error_Handler();
 596:Src/main.c    ****   }
 597:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 598:Src/main.c    **** 
 599:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 600:Src/main.c    **** 
 601:Src/main.c    **** }
 602:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 12


 603:Src/main.c    **** /**
 604:Src/main.c    ****   * @brief GPIO Initialization Function
 605:Src/main.c    ****   * @param None
 606:Src/main.c    ****   * @retval None
 607:Src/main.c    ****   */
 608:Src/main.c    **** static void MX_GPIO_Init(void)
 609:Src/main.c    **** {
  27              		.loc 1 609 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 56
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 36
  34              		.cfi_offset 4, -36
  35              		.cfi_offset 5, -32
  36              		.cfi_offset 6, -28
  37              		.cfi_offset 7, -24
  38              		.cfi_offset 8, -20
  39              		.cfi_offset 9, -16
  40              		.cfi_offset 10, -12
  41              		.cfi_offset 11, -8
  42              		.cfi_offset 14, -4
  43 0004 8FB0     		sub	sp, sp, #60
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 96
 610:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  46              		.loc 1 610 0
  47 0006 0024     		movs	r4, #0
  48 0008 0994     		str	r4, [sp, #36]
  49 000a 0A94     		str	r4, [sp, #40]
  50 000c 0B94     		str	r4, [sp, #44]
  51 000e 0C94     		str	r4, [sp, #48]
  52 0010 0D94     		str	r4, [sp, #52]
  53              	.LBB2:
 611:Src/main.c    **** 
 612:Src/main.c    ****   /* GPIO Ports Clock Enable */
 613:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  54              		.loc 1 613 0
  55 0012 0194     		str	r4, [sp, #4]
  56 0014 AA4B     		ldr	r3, .L3
  57 0016 1A6B     		ldr	r2, [r3, #48]
  58 0018 42F00402 		orr	r2, r2, #4
  59 001c 1A63     		str	r2, [r3, #48]
  60 001e 1A6B     		ldr	r2, [r3, #48]
  61 0020 02F00402 		and	r2, r2, #4
  62 0024 0192     		str	r2, [sp, #4]
  63 0026 019A     		ldr	r2, [sp, #4]
  64              	.LBE2:
  65              	.LBB3:
 614:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  66              		.loc 1 614 0
  67 0028 0294     		str	r4, [sp, #8]
  68 002a 1A6B     		ldr	r2, [r3, #48]
  69 002c 42F02002 		orr	r2, r2, #32
  70 0030 1A63     		str	r2, [r3, #48]
  71 0032 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccn1DpdY.s 			page 13


  72 0034 02F02002 		and	r2, r2, #32
  73 0038 0292     		str	r2, [sp, #8]
  74 003a 029A     		ldr	r2, [sp, #8]
  75              	.LBE3:
  76              	.LBB4:
 615:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  77              		.loc 1 615 0
  78 003c 0394     		str	r4, [sp, #12]
  79 003e 1A6B     		ldr	r2, [r3, #48]
  80 0040 42F08002 		orr	r2, r2, #128
  81 0044 1A63     		str	r2, [r3, #48]
  82 0046 1A6B     		ldr	r2, [r3, #48]
  83 0048 02F08002 		and	r2, r2, #128
  84 004c 0392     		str	r2, [sp, #12]
  85 004e 039A     		ldr	r2, [sp, #12]
  86              	.LBE4:
  87              	.LBB5:
 616:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  88              		.loc 1 616 0
  89 0050 0494     		str	r4, [sp, #16]
  90 0052 1A6B     		ldr	r2, [r3, #48]
  91 0054 42F00102 		orr	r2, r2, #1
  92 0058 1A63     		str	r2, [r3, #48]
  93 005a 1A6B     		ldr	r2, [r3, #48]
  94 005c 02F00102 		and	r2, r2, #1
  95 0060 0492     		str	r2, [sp, #16]
  96 0062 049A     		ldr	r2, [sp, #16]
  97              	.LBE5:
  98              	.LBB6:
 617:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  99              		.loc 1 617 0
 100 0064 0594     		str	r4, [sp, #20]
 101 0066 1A6B     		ldr	r2, [r3, #48]
 102 0068 42F00202 		orr	r2, r2, #2
 103 006c 1A63     		str	r2, [r3, #48]
 104 006e 1A6B     		ldr	r2, [r3, #48]
 105 0070 02F00202 		and	r2, r2, #2
 106 0074 0592     		str	r2, [sp, #20]
 107 0076 059A     		ldr	r2, [sp, #20]
 108              	.LBE6:
 109              	.LBB7:
 618:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 110              		.loc 1 618 0
 111 0078 0694     		str	r4, [sp, #24]
 112 007a 1A6B     		ldr	r2, [r3, #48]
 113 007c 42F04002 		orr	r2, r2, #64
 114 0080 1A63     		str	r2, [r3, #48]
 115 0082 1A6B     		ldr	r2, [r3, #48]
 116 0084 02F04002 		and	r2, r2, #64
 117 0088 0692     		str	r2, [sp, #24]
 118 008a 069A     		ldr	r2, [sp, #24]
 119              	.LBE7:
 120              	.LBB8:
 619:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 121              		.loc 1 619 0
 122 008c 0794     		str	r4, [sp, #28]
 123 008e 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccn1DpdY.s 			page 14


 124 0090 42F01002 		orr	r2, r2, #16
 125 0094 1A63     		str	r2, [r3, #48]
 126 0096 1A6B     		ldr	r2, [r3, #48]
 127 0098 02F01002 		and	r2, r2, #16
 128 009c 0792     		str	r2, [sp, #28]
 129 009e 079A     		ldr	r2, [sp, #28]
 130              	.LBE8:
 131              	.LBB9:
 620:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 132              		.loc 1 620 0
 133 00a0 0894     		str	r4, [sp, #32]
 134 00a2 1A6B     		ldr	r2, [r3, #48]
 135 00a4 42F00802 		orr	r2, r2, #8
 136 00a8 1A63     		str	r2, [r3, #48]
 137 00aa 1B6B     		ldr	r3, [r3, #48]
 138 00ac 03F00803 		and	r3, r3, #8
 139 00b0 0893     		str	r3, [sp, #32]
 140 00b2 089B     		ldr	r3, [sp, #32]
 141              	.LBE9:
 621:Src/main.c    **** 
 622:Src/main.c    ****   /*Configure GPIO pin Output Level */
 623:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 142              		.loc 1 623 0
 143 00b4 2246     		mov	r2, r4
 144 00b6 1621     		movs	r1, #22
 145 00b8 8248     		ldr	r0, .L3+4
 146 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 147              	.LVL0:
 624:Src/main.c    **** 
 625:Src/main.c    ****   /*Configure GPIO pin Output Level */
 626:Src/main.c    ****   HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 148              		.loc 1 626 0
 149 00be 2246     		mov	r2, r4
 150 00c0 8021     		movs	r1, #128
 151 00c2 8148     		ldr	r0, .L3+8
 152 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 153              	.LVL1:
 627:Src/main.c    **** 
 628:Src/main.c    ****   /*Configure GPIO pin Output Level */
 629:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 154              		.loc 1 629 0
 155 00c8 DFF810A2 		ldr	r10, .L3+28
 156 00cc 2246     		mov	r2, r4
 157 00ce 4FF46041 		mov	r1, #57344
 158 00d2 5046     		mov	r0, r10
 159 00d4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 160              	.LVL2:
 630:Src/main.c    **** 
 631:Src/main.c    ****   /*Configure GPIO pin Output Level */
 632:Src/main.c    ****   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 161              		.loc 1 632 0
 162 00d8 2246     		mov	r2, r4
 163 00da 46F20301 		movw	r1, #24579
 164 00de 7B48     		ldr	r0, .L3+12
 165 00e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 166              	.LVL3:
 633:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 15


 634:Src/main.c    ****   /*Configure GPIO pin Output Level */
 635:Src/main.c    ****   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 167              		.loc 1 635 0
 168 00e4 2246     		mov	r2, r4
 169 00e6 4FF68071 		movw	r1, #65408
 170 00ea 7948     		ldr	r0, .L3+16
 171 00ec FFF7FEFF 		bl	HAL_GPIO_WritePin
 172              	.LVL4:
 636:Src/main.c    ****                           |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 637:Src/main.c    ****                           |GPIO_PIN_15, GPIO_PIN_RESET);
 638:Src/main.c    **** 
 639:Src/main.c    ****   /*Configure GPIO pin Output Level */
 640:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 173              		.loc 1 640 0
 174 00f0 2246     		mov	r2, r4
 175 00f2 4FF44051 		mov	r1, #12288
 176 00f6 7748     		ldr	r0, .L3+20
 177 00f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 178              	.LVL5:
 641:Src/main.c    **** 
 642:Src/main.c    ****   /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin 
 643:Src/main.c    ****                            A4_Pin A5_Pin SDNRAS_Pin A6_Pin */
 644:Src/main.c    ****   GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 179              		.loc 1 644 0
 180 00fc 41F63F03 		movw	r3, #6207
 181 0100 0993     		str	r3, [sp, #36]
 645:Src/main.c    ****                           |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin;
 646:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 182              		.loc 1 646 0
 183 0102 0225     		movs	r5, #2
 184 0104 0A95     		str	r5, [sp, #40]
 647:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 185              		.loc 1 647 0
 186 0106 0B94     		str	r4, [sp, #44]
 648:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 187              		.loc 1 648 0
 188 0108 0327     		movs	r7, #3
 189 010a 0C97     		str	r7, [sp, #48]
 649:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 190              		.loc 1 649 0
 191 010c 4FF00C08 		mov	r8, #12
 192 0110 CDF83480 		str	r8, [sp, #52]
 650:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 193              		.loc 1 650 0
 194 0114 09A9     		add	r1, sp, #36
 195 0116 5046     		mov	r0, r10
 196 0118 FFF7FEFF 		bl	HAL_GPIO_Init
 197              	.LVL6:
 651:Src/main.c    **** 
 652:Src/main.c    ****   /*Configure GPIO pin : ENABLE_Pin */
 653:Src/main.c    ****   GPIO_InitStruct.Pin = ENABLE_Pin;
 198              		.loc 1 653 0
 199 011c 4FF48063 		mov	r3, #1024
 200 0120 0993     		str	r3, [sp, #36]
 654:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 201              		.loc 1 654 0
 202 0122 0A95     		str	r5, [sp, #40]
ARM GAS  /tmp/ccn1DpdY.s 			page 16


 655:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 203              		.loc 1 655 0
 204 0124 0B94     		str	r4, [sp, #44]
 656:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 205              		.loc 1 656 0
 206 0126 0C94     		str	r4, [sp, #48]
 657:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 207              		.loc 1 657 0
 208 0128 4FF00E09 		mov	r9, #14
 209 012c CDF83490 		str	r9, [sp, #52]
 658:Src/main.c    ****   HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 210              		.loc 1 658 0
 211 0130 09A9     		add	r1, sp, #36
 212 0132 5046     		mov	r0, r10
 213 0134 FFF7FEFF 		bl	HAL_GPIO_Init
 214              	.LVL7:
 659:Src/main.c    **** 
 660:Src/main.c    ****   /*Configure GPIO pin : SDNWE_Pin */
 661:Src/main.c    ****   GPIO_InitStruct.Pin = SDNWE_Pin;
 215              		.loc 1 661 0
 216 0138 0126     		movs	r6, #1
 217 013a 0996     		str	r6, [sp, #36]
 662:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 218              		.loc 1 662 0
 219 013c 0A95     		str	r5, [sp, #40]
 663:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 220              		.loc 1 663 0
 221 013e 0B94     		str	r4, [sp, #44]
 664:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 222              		.loc 1 664 0
 223 0140 0C97     		str	r7, [sp, #48]
 665:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 224              		.loc 1 665 0
 225 0142 CDF83480 		str	r8, [sp, #52]
 666:Src/main.c    ****   HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 226              		.loc 1 666 0
 227 0146 09A9     		add	r1, sp, #36
 228 0148 5E48     		ldr	r0, .L3+4
 229 014a FFF7FEFF 		bl	HAL_GPIO_Init
 230              	.LVL8:
 667:Src/main.c    **** 
 668:Src/main.c    ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
 669:Src/main.c    ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 231              		.loc 1 669 0
 232 014e 1623     		movs	r3, #22
 233 0150 0993     		str	r3, [sp, #36]
 670:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 234              		.loc 1 670 0
 235 0152 0A96     		str	r6, [sp, #40]
 671:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 236              		.loc 1 671 0
 237 0154 0B94     		str	r4, [sp, #44]
 672:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 238              		.loc 1 672 0
 239 0156 0C94     		str	r4, [sp, #48]
 673:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 240              		.loc 1 673 0
ARM GAS  /tmp/ccn1DpdY.s 			page 17


 241 0158 09A9     		add	r1, sp, #36
 242 015a 5A48     		ldr	r0, .L3+4
 243 015c FFF7FEFF 		bl	HAL_GPIO_Init
 244              	.LVL9:
 674:Src/main.c    **** 
 675:Src/main.c    ****   /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
 676:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 245              		.loc 1 676 0
 246 0160 48F20703 		movw	r3, #32775
 247 0164 0993     		str	r3, [sp, #36]
 677:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 248              		.loc 1 677 0
 249 0166 DFF878B1 		ldr	fp, .L3+32
 250 016a CDF828B0 		str	fp, [sp, #40]
 678:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 251              		.loc 1 678 0
 252 016e 0B94     		str	r4, [sp, #44]
 679:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 253              		.loc 1 679 0
 254 0170 09A9     		add	r1, sp, #36
 255 0172 5548     		ldr	r0, .L3+8
 256 0174 FFF7FEFF 		bl	HAL_GPIO_Init
 257              	.LVL10:
 680:Src/main.c    **** 
 681:Src/main.c    ****   /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin 
 682:Src/main.c    ****                            R5_Pin */
 683:Src/main.c    ****   GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 258              		.loc 1 683 0
 259 0178 41F65803 		movw	r3, #6232
 260 017c 0993     		str	r3, [sp, #36]
 684:Src/main.c    ****                           |R5_Pin;
 685:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 261              		.loc 1 685 0
 262 017e 0A95     		str	r5, [sp, #40]
 686:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 263              		.loc 1 686 0
 264 0180 0B94     		str	r4, [sp, #44]
 687:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 265              		.loc 1 687 0
 266 0182 0C94     		str	r4, [sp, #48]
 688:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 267              		.loc 1 688 0
 268 0184 CDF83490 		str	r9, [sp, #52]
 689:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 269              		.loc 1 689 0
 270 0188 09A9     		add	r1, sp, #36
 271 018a 4F48     		ldr	r0, .L3+8
 272 018c FFF7FEFF 		bl	HAL_GPIO_Init
 273              	.LVL11:
 690:Src/main.c    **** 
 691:Src/main.c    ****   /*Configure GPIO pin : ACP_RST_Pin */
 692:Src/main.c    ****   GPIO_InitStruct.Pin = ACP_RST_Pin;
 274              		.loc 1 692 0
 275 0190 8023     		movs	r3, #128
 276 0192 0993     		str	r3, [sp, #36]
 693:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 277              		.loc 1 693 0
ARM GAS  /tmp/ccn1DpdY.s 			page 18


 278 0194 0A96     		str	r6, [sp, #40]
 694:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 279              		.loc 1 694 0
 280 0196 0B94     		str	r4, [sp, #44]
 695:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 281              		.loc 1 695 0
 282 0198 0C94     		str	r4, [sp, #48]
 696:Src/main.c    ****   HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 283              		.loc 1 696 0
 284 019a 09A9     		add	r1, sp, #36
 285 019c 4A48     		ldr	r0, .L3+8
 286 019e FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL12:
 697:Src/main.c    **** 
 698:Src/main.c    ****   /*Configure GPIO pin : OTG_FS_OC_Pin */
 699:Src/main.c    ****   GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 288              		.loc 1 699 0
 289 01a2 2023     		movs	r3, #32
 290 01a4 0993     		str	r3, [sp, #36]
 700:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 291              		.loc 1 700 0
 292 01a6 CDF828B0 		str	fp, [sp, #40]
 701:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 293              		.loc 1 701 0
 294 01aa 0B94     		str	r4, [sp, #44]
 702:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 295              		.loc 1 702 0
 296 01ac 09A9     		add	r1, sp, #36
 297 01ae 4548     		ldr	r0, .L3+4
 298 01b0 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL13:
 703:Src/main.c    **** 
 704:Src/main.c    ****   /*Configure GPIO pins : R3_Pin R6_Pin */
 705:Src/main.c    ****   GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 300              		.loc 1 705 0
 301 01b4 0997     		str	r7, [sp, #36]
 706:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 302              		.loc 1 706 0
 303 01b6 0A95     		str	r5, [sp, #40]
 707:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 304              		.loc 1 707 0
 305 01b8 0B94     		str	r4, [sp, #44]
 708:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 306              		.loc 1 708 0
 307 01ba 0C94     		str	r4, [sp, #48]
 709:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 308              		.loc 1 709 0
 309 01bc 0923     		movs	r3, #9
 310 01be 0D93     		str	r3, [sp, #52]
 710:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 311              		.loc 1 710 0
 312 01c0 09A9     		add	r1, sp, #36
 313 01c2 4548     		ldr	r0, .L3+24
 314 01c4 FFF7FEFF 		bl	HAL_GPIO_Init
 315              	.LVL14:
 711:Src/main.c    **** 
 712:Src/main.c    ****   /*Configure GPIO pin : BOOT1_Pin */
ARM GAS  /tmp/ccn1DpdY.s 			page 19


 713:Src/main.c    ****   GPIO_InitStruct.Pin = BOOT1_Pin;
 316              		.loc 1 713 0
 317 01c8 4FF0040B 		mov	fp, #4
 318 01cc CDF824B0 		str	fp, [sp, #36]
 714:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 319              		.loc 1 714 0
 320 01d0 0A94     		str	r4, [sp, #40]
 715:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 321              		.loc 1 715 0
 322 01d2 0B94     		str	r4, [sp, #44]
 716:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 323              		.loc 1 716 0
 324 01d4 09A9     		add	r1, sp, #36
 325 01d6 4048     		ldr	r0, .L3+24
 326 01d8 FFF7FEFF 		bl	HAL_GPIO_Init
 327              	.LVL15:
 717:Src/main.c    **** 
 718:Src/main.c    ****   /*Configure GPIO pins : PF13 PF14 PF15 */
 719:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 328              		.loc 1 719 0
 329 01dc 4FF46043 		mov	r3, #57344
 330 01e0 0993     		str	r3, [sp, #36]
 720:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 331              		.loc 1 720 0
 332 01e2 0A96     		str	r6, [sp, #40]
 721:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 333              		.loc 1 721 0
 334 01e4 0B94     		str	r4, [sp, #44]
 722:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 335              		.loc 1 722 0
 336 01e6 0C94     		str	r4, [sp, #48]
 723:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 337              		.loc 1 723 0
 338 01e8 09A9     		add	r1, sp, #36
 339 01ea 5046     		mov	r0, r10
 340 01ec FFF7FEFF 		bl	HAL_GPIO_Init
 341              	.LVL16:
 724:Src/main.c    **** 
 725:Src/main.c    ****   /*Configure GPIO pins : PG0 PG1 LD3_Pin LD4_Pin */
 726:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|LD4_Pin;
 342              		.loc 1 726 0
 343 01f0 46F20303 		movw	r3, #24579
 344 01f4 0993     		str	r3, [sp, #36]
 727:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 345              		.loc 1 727 0
 346 01f6 0A96     		str	r6, [sp, #40]
 728:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 347              		.loc 1 728 0
 348 01f8 0B94     		str	r4, [sp, #44]
 729:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 349              		.loc 1 729 0
 350 01fa 0C94     		str	r4, [sp, #48]
 730:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 351              		.loc 1 730 0
 352 01fc 09A9     		add	r1, sp, #36
 353 01fe 3348     		ldr	r0, .L3+12
 354 0200 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccn1DpdY.s 			page 20


 355              	.LVL17:
 731:Src/main.c    **** 
 732:Src/main.c    ****   /*Configure GPIO pins : PE7 PE8 PE9 PE10 
 733:Src/main.c    ****                            PE11 PE12 PE13 PE14 
 734:Src/main.c    ****                            PE15 */
 735:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 356              		.loc 1 735 0
 357 0204 4FF68073 		movw	r3, #65408
 358 0208 0993     		str	r3, [sp, #36]
 736:Src/main.c    ****                           |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 737:Src/main.c    ****                           |GPIO_PIN_15;
 738:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 359              		.loc 1 738 0
 360 020a 0A96     		str	r6, [sp, #40]
 739:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 361              		.loc 1 739 0
 362 020c 0B94     		str	r4, [sp, #44]
 740:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 363              		.loc 1 740 0
 364 020e 0C94     		str	r4, [sp, #48]
 741:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 365              		.loc 1 741 0
 366 0210 09A9     		add	r1, sp, #36
 367 0212 2F48     		ldr	r0, .L3+16
 368 0214 FFF7FEFF 		bl	HAL_GPIO_Init
 369              	.LVL18:
 742:Src/main.c    **** 
 743:Src/main.c    ****   /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
 744:Src/main.c    ****   GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 370              		.loc 1 744 0
 371 0218 4FF47063 		mov	r3, #3840
 372 021c 0993     		str	r3, [sp, #36]
 745:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 373              		.loc 1 745 0
 374 021e 0A95     		str	r5, [sp, #40]
 746:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 375              		.loc 1 746 0
 376 0220 0B94     		str	r4, [sp, #44]
 747:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 377              		.loc 1 747 0
 378 0222 0C94     		str	r4, [sp, #48]
 748:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 379              		.loc 1 748 0
 380 0224 CDF83490 		str	r9, [sp, #52]
 749:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 381              		.loc 1 749 0
 382 0228 09A9     		add	r1, sp, #36
 383 022a 2B48     		ldr	r0, .L3+24
 384 022c FFF7FEFF 		bl	HAL_GPIO_Init
 385              	.LVL19:
 750:Src/main.c    **** 
 751:Src/main.c    ****   /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
 752:Src/main.c    ****   GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 386              		.loc 1 752 0
 387 0230 4FF45043 		mov	r3, #53248
 388 0234 0993     		str	r3, [sp, #36]
 753:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
ARM GAS  /tmp/ccn1DpdY.s 			page 21


 389              		.loc 1 753 0
 390 0236 0A95     		str	r5, [sp, #40]
 754:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 391              		.loc 1 754 0
 392 0238 0B94     		str	r4, [sp, #44]
 755:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 393              		.loc 1 755 0
 394 023a 0C94     		str	r4, [sp, #48]
 756:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 395              		.loc 1 756 0
 396 023c CDF83480 		str	r8, [sp, #52]
 757:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 397              		.loc 1 757 0
 398 0240 09A9     		add	r1, sp, #36
 399 0242 2548     		ldr	r0, .L3+24
 400 0244 FFF7FEFF 		bl	HAL_GPIO_Init
 401              	.LVL20:
 758:Src/main.c    **** 
 759:Src/main.c    ****   /*Configure GPIO pin : VBUS_HS_Pin */
 760:Src/main.c    ****   GPIO_InitStruct.Pin = VBUS_HS_Pin;
 402              		.loc 1 760 0
 403 0248 4FF40053 		mov	r3, #8192
 404 024c 0993     		str	r3, [sp, #36]
 761:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 405              		.loc 1 761 0
 406 024e 0A94     		str	r4, [sp, #40]
 762:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 407              		.loc 1 762 0
 408 0250 0B94     		str	r4, [sp, #44]
 763:Src/main.c    ****   HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 409              		.loc 1 763 0
 410 0252 09A9     		add	r1, sp, #36
 411 0254 2048     		ldr	r0, .L3+24
 412 0256 FFF7FEFF 		bl	HAL_GPIO_Init
 413              	.LVL21:
 764:Src/main.c    **** 
 765:Src/main.c    ****   /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin 
 766:Src/main.c    ****                            D1_Pin D2_Pin D3_Pin */
 767:Src/main.c    ****   GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 414              		.loc 1 767 0
 415 025a 4CF20373 		movw	r3, #50947
 416 025e 0993     		str	r3, [sp, #36]
 768:Src/main.c    ****                           |D1_Pin|D2_Pin|D3_Pin;
 769:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 417              		.loc 1 769 0
 418 0260 0A95     		str	r5, [sp, #40]
 770:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 419              		.loc 1 770 0
 420 0262 0B94     		str	r4, [sp, #44]
 771:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 421              		.loc 1 771 0
 422 0264 0C97     		str	r7, [sp, #48]
 772:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 423              		.loc 1 772 0
 424 0266 CDF83480 		str	r8, [sp, #52]
 773:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 425              		.loc 1 773 0
ARM GAS  /tmp/ccn1DpdY.s 			page 22


 426 026a 09A9     		add	r1, sp, #36
 427 026c 1948     		ldr	r0, .L3+20
 428 026e FFF7FEFF 		bl	HAL_GPIO_Init
 429              	.LVL22:
 774:Src/main.c    **** 
 775:Src/main.c    ****   /*Configure GPIO pin : TE_Pin */
 776:Src/main.c    ****   GPIO_InitStruct.Pin = TE_Pin;
 430              		.loc 1 776 0
 431 0272 4FF40063 		mov	r3, #2048
 432 0276 0993     		str	r3, [sp, #36]
 777:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 433              		.loc 1 777 0
 434 0278 0A94     		str	r4, [sp, #40]
 778:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 435              		.loc 1 778 0
 436 027a 0B94     		str	r4, [sp, #44]
 779:Src/main.c    ****   HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 437              		.loc 1 779 0
 438 027c 09A9     		add	r1, sp, #36
 439 027e 1548     		ldr	r0, .L3+20
 440 0280 FFF7FEFF 		bl	HAL_GPIO_Init
 441              	.LVL23:
 780:Src/main.c    **** 
 781:Src/main.c    ****   /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
 782:Src/main.c    ****   GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 442              		.loc 1 782 0
 443 0284 4FF44053 		mov	r3, #12288
 444 0288 0993     		str	r3, [sp, #36]
 783:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 445              		.loc 1 783 0
 446 028a 0A96     		str	r6, [sp, #40]
 784:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 447              		.loc 1 784 0
 448 028c 0B94     		str	r4, [sp, #44]
 785:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 449              		.loc 1 785 0
 450 028e 0C94     		str	r4, [sp, #48]
 786:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 451              		.loc 1 786 0
 452 0290 09A9     		add	r1, sp, #36
 453 0292 1048     		ldr	r0, .L3+20
 454 0294 FFF7FEFF 		bl	HAL_GPIO_Init
 455              	.LVL24:
 787:Src/main.c    **** 
 788:Src/main.c    ****   /*Configure GPIO pins : BA0_Pin BA1_Pin SDCLK_Pin SDNCAS_Pin */
 789:Src/main.c    ****   GPIO_InitStruct.Pin = BA0_Pin|BA1_Pin|SDCLK_Pin|SDNCAS_Pin;
 456              		.loc 1 789 0
 457 0298 48F23013 		movw	r3, #33072
 458 029c 0993     		str	r3, [sp, #36]
 790:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 459              		.loc 1 790 0
 460 029e 0A95     		str	r5, [sp, #40]
 791:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 461              		.loc 1 791 0
 462 02a0 0B94     		str	r4, [sp, #44]
 792:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 463              		.loc 1 792 0
ARM GAS  /tmp/ccn1DpdY.s 			page 23


 464 02a2 0C97     		str	r7, [sp, #48]
 793:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 465              		.loc 1 793 0
 466 02a4 CDF83480 		str	r8, [sp, #52]
 794:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 467              		.loc 1 794 0
 468 02a8 09A9     		add	r1, sp, #36
 469 02aa 0848     		ldr	r0, .L3+12
 470 02ac FFF7FEFF 		bl	HAL_GPIO_Init
 471              	.LVL25:
 795:Src/main.c    **** 
 796:Src/main.c    ****   /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
 797:Src/main.c    ****   GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 472              		.loc 1 797 0
 473 02b0 4FF40C63 		mov	r3, #2240
 474 02b4 0993     		str	r3, [sp, #36]
 798:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 475              		.loc 1 798 0
 476 02b6 0A95     		str	r5, [sp, #40]
 799:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 477              		.loc 1 799 0
 478 02b8 0B94     		str	r4, [sp, #44]
 800:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 479              		.loc 1 800 0
 480 02ba 0C94     		str	r4, [sp, #48]
 481 02bc 12E0     		b	.L4
 482              	.L5:
 483 02be 00BF     		.align	2
 484              	.L3:
 485 02c0 00380240 		.word	1073887232
 486 02c4 00080240 		.word	1073874944
 487 02c8 00000240 		.word	1073872896
 488 02cc 00180240 		.word	1073879040
 489 02d0 00100240 		.word	1073876992
 490 02d4 000C0240 		.word	1073875968
 491 02d8 00040240 		.word	1073873920
 492 02dc 00140240 		.word	1073878016
 493 02e0 00001210 		.word	269615104
 494              	.L4:
 801:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 495              		.loc 1 801 0
 496 02e4 CDF83490 		str	r9, [sp, #52]
 802:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 497              		.loc 1 802 0
 498 02e8 09A9     		add	r1, sp, #36
 499 02ea 2D48     		ldr	r0, .L6
 500 02ec FFF7FEFF 		bl	HAL_GPIO_Init
 501              	.LVL26:
 803:Src/main.c    **** 
 804:Src/main.c    ****   /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
 805:Src/main.c    ****   GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 502              		.loc 1 805 0
 503 02f0 4FF49863 		mov	r3, #1216
 504 02f4 0993     		str	r3, [sp, #36]
 806:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 505              		.loc 1 806 0
 506 02f6 0A95     		str	r5, [sp, #40]
ARM GAS  /tmp/ccn1DpdY.s 			page 24


 807:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 507              		.loc 1 807 0
 508 02f8 0B94     		str	r4, [sp, #44]
 808:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 509              		.loc 1 808 0
 510 02fa 0C94     		str	r4, [sp, #48]
 809:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 511              		.loc 1 809 0
 512 02fc CDF83490 		str	r9, [sp, #52]
 810:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 513              		.loc 1 810 0
 514 0300 09A9     		add	r1, sp, #36
 515 0302 2848     		ldr	r0, .L6+4
 516 0304 FFF7FEFF 		bl	HAL_GPIO_Init
 517              	.LVL27:
 811:Src/main.c    **** 
 812:Src/main.c    ****   /*Configure GPIO pin : I2C3_SDA_Pin */
 813:Src/main.c    ****   GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 518              		.loc 1 813 0
 519 0308 4FF40073 		mov	r3, #512
 520 030c 0993     		str	r3, [sp, #36]
 814:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 521              		.loc 1 814 0
 522 030e 4FF0120A 		mov	r10, #18
 523 0312 CDF828A0 		str	r10, [sp, #40]
 815:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 524              		.loc 1 815 0
 525 0316 0B96     		str	r6, [sp, #44]
 816:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 526              		.loc 1 816 0
 527 0318 0C94     		str	r4, [sp, #48]
 817:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 528              		.loc 1 817 0
 529 031a CDF834B0 		str	fp, [sp, #52]
 818:Src/main.c    ****   HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 530              		.loc 1 818 0
 531 031e 09A9     		add	r1, sp, #36
 532 0320 2048     		ldr	r0, .L6+4
 533 0322 FFF7FEFF 		bl	HAL_GPIO_Init
 534              	.LVL28:
 819:Src/main.c    **** 
 820:Src/main.c    ****   /*Configure GPIO pin : I2C3_SCL_Pin */
 821:Src/main.c    ****   GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 535              		.loc 1 821 0
 536 0326 4FF48073 		mov	r3, #256
 537 032a 0993     		str	r3, [sp, #36]
 822:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 538              		.loc 1 822 0
 539 032c CDF828A0 		str	r10, [sp, #40]
 823:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 540              		.loc 1 823 0
 541 0330 0B96     		str	r6, [sp, #44]
 824:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 542              		.loc 1 824 0
 543 0332 0C94     		str	r4, [sp, #48]
 825:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 544              		.loc 1 825 0
ARM GAS  /tmp/ccn1DpdY.s 			page 25


 545 0334 CDF834B0 		str	fp, [sp, #52]
 826:Src/main.c    ****   HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 546              		.loc 1 826 0
 547 0338 09A9     		add	r1, sp, #36
 548 033a 1B48     		ldr	r0, .L6+8
 549 033c FFF7FEFF 		bl	HAL_GPIO_Init
 550              	.LVL29:
 827:Src/main.c    **** 
 828:Src/main.c    ****   /*Configure GPIO pins : G7_Pin B2_Pin */
 829:Src/main.c    ****   GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 551              		.loc 1 829 0
 552 0340 4823     		movs	r3, #72
 553 0342 0993     		str	r3, [sp, #36]
 830:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 554              		.loc 1 830 0
 555 0344 0A95     		str	r5, [sp, #40]
 831:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 556              		.loc 1 831 0
 557 0346 0B94     		str	r4, [sp, #44]
 832:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 558              		.loc 1 832 0
 559 0348 0C94     		str	r4, [sp, #48]
 833:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 560              		.loc 1 833 0
 561 034a CDF83490 		str	r9, [sp, #52]
 834:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 562              		.loc 1 834 0
 563 034e 09A9     		add	r1, sp, #36
 564 0350 1648     		ldr	r0, .L6+12
 565 0352 FFF7FEFF 		bl	HAL_GPIO_Init
 566              	.LVL30:
 835:Src/main.c    **** 
 836:Src/main.c    ****   /*Configure GPIO pins : G3_Pin B4_Pin */
 837:Src/main.c    ****   GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 567              		.loc 1 837 0
 568 0356 4FF4A053 		mov	r3, #5120
 569 035a 0993     		str	r3, [sp, #36]
 838:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 570              		.loc 1 838 0
 571 035c 0A95     		str	r5, [sp, #40]
 839:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 572              		.loc 1 839 0
 573 035e 0B94     		str	r4, [sp, #44]
 840:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 574              		.loc 1 840 0
 575 0360 0C94     		str	r4, [sp, #48]
 841:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 576              		.loc 1 841 0
 577 0362 0923     		movs	r3, #9
 578 0364 0D93     		str	r3, [sp, #52]
 842:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 579              		.loc 1 842 0
 580 0366 09A9     		add	r1, sp, #36
 581 0368 0D48     		ldr	r0, .L6
 582 036a FFF7FEFF 		bl	HAL_GPIO_Init
 583              	.LVL31:
 843:Src/main.c    **** 
ARM GAS  /tmp/ccn1DpdY.s 			page 26


 844:Src/main.c    ****   /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
 845:Src/main.c    ****   GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 584              		.loc 1 845 0
 585 036e 6023     		movs	r3, #96
 586 0370 0993     		str	r3, [sp, #36]
 846:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 587              		.loc 1 846 0
 588 0372 0A95     		str	r5, [sp, #40]
 847:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 589              		.loc 1 847 0
 590 0374 0B94     		str	r4, [sp, #44]
 848:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 591              		.loc 1 848 0
 592 0376 0C97     		str	r7, [sp, #48]
 849:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 593              		.loc 1 849 0
 594 0378 CDF83480 		str	r8, [sp, #52]
 850:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 595              		.loc 1 850 0
 596 037c 09A9     		add	r1, sp, #36
 597 037e 0C48     		ldr	r0, .L6+16
 598 0380 FFF7FEFF 		bl	HAL_GPIO_Init
 599              	.LVL32:
 851:Src/main.c    **** 
 852:Src/main.c    ****   /*Configure GPIO pins : NBL0_Pin NBL1_Pin */
 853:Src/main.c    ****   GPIO_InitStruct.Pin = NBL0_Pin|NBL1_Pin;
 600              		.loc 1 853 0
 601 0384 0997     		str	r7, [sp, #36]
 854:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 602              		.loc 1 854 0
 603 0386 0A95     		str	r5, [sp, #40]
 855:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 604              		.loc 1 855 0
 605 0388 0B94     		str	r4, [sp, #44]
 856:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 606              		.loc 1 856 0
 607 038a 0C97     		str	r7, [sp, #48]
 857:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 608              		.loc 1 857 0
 609 038c CDF83480 		str	r8, [sp, #52]
 858:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 610              		.loc 1 858 0
 611 0390 09A9     		add	r1, sp, #36
 612 0392 0848     		ldr	r0, .L6+20
 613 0394 FFF7FEFF 		bl	HAL_GPIO_Init
 614              	.LVL33:
 859:Src/main.c    **** 
 860:Src/main.c    **** }
 615              		.loc 1 860 0
 616 0398 0FB0     		add	sp, sp, #60
 617              	.LCFI2:
 618              		.cfi_def_cfa_offset 36
 619              		@ sp needed
 620 039a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 621              	.L7:
 622 039e 00BF     		.align	2
 623              	.L6:
ARM GAS  /tmp/ccn1DpdY.s 			page 27


 624 03a0 00180240 		.word	1073879040
 625 03a4 00080240 		.word	1073874944
 626 03a8 00000240 		.word	1073872896
 627 03ac 000C0240 		.word	1073875968
 628 03b0 00040240 		.word	1073873920
 629 03b4 00100240 		.word	1073876992
 630              		.cfi_endproc
 631              	.LFE137:
 633              		.section	.text.MX_SPI5_Init,"ax",%progbits
 634              		.align	1
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	MX_SPI5_Init:
 641              	.LFB133:
 463:Src/main.c    **** 
 642              		.loc 1 463 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646 0000 08B5     		push	{r3, lr}
 647              	.LCFI3:
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 3, -8
 650              		.cfi_offset 14, -4
 473:Src/main.c    ****   hspi5.Init.Mode = SPI_MODE_SLAVE;
 651              		.loc 1 473 0
 652 0002 0948     		ldr	r0, .L10
 653 0004 094B     		ldr	r3, .L10+4
 654 0006 0360     		str	r3, [r0]
 474:Src/main.c    ****   hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 655              		.loc 1 474 0
 656 0008 0023     		movs	r3, #0
 657 000a 4360     		str	r3, [r0, #4]
 475:Src/main.c    ****   hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 658              		.loc 1 475 0
 659 000c 8360     		str	r3, [r0, #8]
 476:Src/main.c    ****   hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 660              		.loc 1 476 0
 661 000e C360     		str	r3, [r0, #12]
 477:Src/main.c    ****   hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 662              		.loc 1 477 0
 663 0010 0361     		str	r3, [r0, #16]
 478:Src/main.c    ****   hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 664              		.loc 1 478 0
 665 0012 4361     		str	r3, [r0, #20]
 479:Src/main.c    ****   hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 666              		.loc 1 479 0
 667 0014 8361     		str	r3, [r0, #24]
 480:Src/main.c    ****   hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 668              		.loc 1 480 0
 669 0016 0362     		str	r3, [r0, #32]
 481:Src/main.c    ****   hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 670              		.loc 1 481 0
 671 0018 4362     		str	r3, [r0, #36]
 482:Src/main.c    ****   hspi5.Init.CRCPolynomial = 10;
ARM GAS  /tmp/ccn1DpdY.s 			page 28


 672              		.loc 1 482 0
 673 001a 8362     		str	r3, [r0, #40]
 483:Src/main.c    ****   if (HAL_SPI_Init(&hspi5) != HAL_OK)
 674              		.loc 1 483 0
 675 001c 0A23     		movs	r3, #10
 676 001e C362     		str	r3, [r0, #44]
 484:Src/main.c    ****   {
 677              		.loc 1 484 0
 678 0020 FFF7FEFF 		bl	HAL_SPI_Init
 679              	.LVL34:
 680 0024 08BD     		pop	{r3, pc}
 681              	.L11:
 682 0026 00BF     		.align	2
 683              	.L10:
 684 0028 00000000 		.word	hspi5
 685 002c 00500140 		.word	1073827840
 686              		.cfi_endproc
 687              	.LFE133:
 689              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 690              		.align	1
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu fpv4-sp-d16
 696              	MX_USART1_UART_Init:
 697              	.LFB136:
 576:Src/main.c    **** 
 698              		.loc 1 576 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702 0000 08B5     		push	{r3, lr}
 703              	.LCFI4:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 3, -8
 706              		.cfi_offset 14, -4
 585:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 707              		.loc 1 585 0
 708 0002 0848     		ldr	r0, .L14
 709 0004 084B     		ldr	r3, .L14+4
 710 0006 0360     		str	r3, [r0]
 586:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 711              		.loc 1 586 0
 712 0008 4FF4E133 		mov	r3, #115200
 713 000c 4360     		str	r3, [r0, #4]
 587:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 714              		.loc 1 587 0
 715 000e 0023     		movs	r3, #0
 716 0010 8360     		str	r3, [r0, #8]
 588:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 717              		.loc 1 588 0
 718 0012 C360     		str	r3, [r0, #12]
 589:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 719              		.loc 1 589 0
 720 0014 0361     		str	r3, [r0, #16]
 590:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 721              		.loc 1 590 0
ARM GAS  /tmp/ccn1DpdY.s 			page 29


 722 0016 0C22     		movs	r2, #12
 723 0018 4261     		str	r2, [r0, #20]
 591:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 724              		.loc 1 591 0
 725 001a 8361     		str	r3, [r0, #24]
 592:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 726              		.loc 1 592 0
 727 001c C361     		str	r3, [r0, #28]
 593:Src/main.c    ****   {
 728              		.loc 1 593 0
 729 001e FFF7FEFF 		bl	HAL_UART_Init
 730              	.LVL35:
 731 0022 08BD     		pop	{r3, pc}
 732              	.L15:
 733              		.align	2
 734              	.L14:
 735 0024 00000000 		.word	huart1
 736 0028 00100140 		.word	1073811456
 737              		.cfi_endproc
 738              	.LFE136:
 740              		.section	.text.MX_DAC_Init,"ax",%progbits
 741              		.align	1
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu fpv4-sp-d16
 747              	MX_DAC_Init:
 748              	.LFB132:
 425:Src/main.c    **** 
 749              		.loc 1 425 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 8
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753 0000 30B5     		push	{r4, r5, lr}
 754              	.LCFI5:
 755              		.cfi_def_cfa_offset 12
 756              		.cfi_offset 4, -12
 757              		.cfi_offset 5, -8
 758              		.cfi_offset 14, -4
 759 0002 83B0     		sub	sp, sp, #12
 760              	.LCFI6:
 761              		.cfi_def_cfa_offset 24
 431:Src/main.c    **** 
 762              		.loc 1 431 0
 763 0004 0024     		movs	r4, #0
 764 0006 0094     		str	r4, [sp]
 765 0008 0194     		str	r4, [sp, #4]
 438:Src/main.c    ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 766              		.loc 1 438 0
 767 000a 074D     		ldr	r5, .L18
 768 000c 074B     		ldr	r3, .L18+4
 769 000e 2B60     		str	r3, [r5]
 439:Src/main.c    ****   {
 770              		.loc 1 439 0
 771 0010 2846     		mov	r0, r5
 772 0012 FFF7FEFF 		bl	HAL_DAC_Init
 773              	.LVL36:
ARM GAS  /tmp/ccn1DpdY.s 			page 30


 445:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 774              		.loc 1 445 0
 775 0016 0094     		str	r4, [sp]
 446:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 776              		.loc 1 446 0
 777 0018 0194     		str	r4, [sp, #4]
 447:Src/main.c    ****   {
 778              		.loc 1 447 0
 779 001a 1022     		movs	r2, #16
 780 001c 6946     		mov	r1, sp
 781 001e 2846     		mov	r0, r5
 782 0020 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 783              	.LVL37:
 455:Src/main.c    **** 
 784              		.loc 1 455 0
 785 0024 03B0     		add	sp, sp, #12
 786              	.LCFI7:
 787              		.cfi_def_cfa_offset 12
 788              		@ sp needed
 789 0026 30BD     		pop	{r4, r5, pc}
 790              	.L19:
 791              		.align	2
 792              	.L18:
 793 0028 00000000 		.word	hdac
 794 002c 00740040 		.word	1073771520
 795              		.cfi_endproc
 796              	.LFE132:
 798              		.section	.text.MX_TIM6_Init,"ax",%progbits
 799              		.align	1
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu fpv4-sp-d16
 805              	MX_TIM6_Init:
 806              	.LFB134:
 500:Src/main.c    **** 
 807              		.loc 1 500 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 8
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811 0000 30B5     		push	{r4, r5, lr}
 812              	.LCFI8:
 813              		.cfi_def_cfa_offset 12
 814              		.cfi_offset 4, -12
 815              		.cfi_offset 5, -8
 816              		.cfi_offset 14, -4
 817 0002 83B0     		sub	sp, sp, #12
 818              	.LCFI9:
 819              		.cfi_def_cfa_offset 24
 506:Src/main.c    **** 
 820              		.loc 1 506 0
 821 0004 0025     		movs	r5, #0
 822 0006 0095     		str	r5, [sp]
 823 0008 0195     		str	r5, [sp, #4]
 511:Src/main.c    ****   htim6.Init.Prescaler = 0;
 824              		.loc 1 511 0
 825 000a 0A4C     		ldr	r4, .L22
ARM GAS  /tmp/ccn1DpdY.s 			page 31


 826 000c 0A4B     		ldr	r3, .L22+4
 827 000e 2360     		str	r3, [r4]
 512:Src/main.c    ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 828              		.loc 1 512 0
 829 0010 6560     		str	r5, [r4, #4]
 513:Src/main.c    ****   htim6.Init.Period = 1290;
 830              		.loc 1 513 0
 831 0012 A560     		str	r5, [r4, #8]
 514:Src/main.c    ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 832              		.loc 1 514 0
 833 0014 40F20A53 		movw	r3, #1290
 834 0018 E360     		str	r3, [r4, #12]
 515:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 835              		.loc 1 515 0
 836 001a A561     		str	r5, [r4, #24]
 516:Src/main.c    ****   {
 837              		.loc 1 516 0
 838 001c 2046     		mov	r0, r4
 839 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 840              	.LVL38:
 520:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 841              		.loc 1 520 0
 842 0022 0095     		str	r5, [sp]
 521:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 843              		.loc 1 521 0
 844 0024 0195     		str	r5, [sp, #4]
 522:Src/main.c    ****   {
 845              		.loc 1 522 0
 846 0026 6946     		mov	r1, sp
 847 0028 2046     		mov	r0, r4
 848 002a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 849              	.LVL39:
 530:Src/main.c    **** 
 850              		.loc 1 530 0
 851 002e 03B0     		add	sp, sp, #12
 852              	.LCFI10:
 853              		.cfi_def_cfa_offset 12
 854              		@ sp needed
 855 0030 30BD     		pop	{r4, r5, pc}
 856              	.L23:
 857 0032 00BF     		.align	2
 858              	.L22:
 859 0034 00000000 		.word	htim6
 860 0038 00100040 		.word	1073745920
 861              		.cfi_endproc
 862              	.LFE134:
 864              		.section	.text.MX_TIM7_Init,"ax",%progbits
 865              		.align	1
 866              		.syntax unified
 867              		.thumb
 868              		.thumb_func
 869              		.fpu fpv4-sp-d16
 871              	MX_TIM7_Init:
 872              	.LFB135:
 538:Src/main.c    **** 
 873              		.loc 1 538 0
 874              		.cfi_startproc
ARM GAS  /tmp/ccn1DpdY.s 			page 32


 875              		@ args = 0, pretend = 0, frame = 8
 876              		@ frame_needed = 0, uses_anonymous_args = 0
 877 0000 30B5     		push	{r4, r5, lr}
 878              	.LCFI11:
 879              		.cfi_def_cfa_offset 12
 880              		.cfi_offset 4, -12
 881              		.cfi_offset 5, -8
 882              		.cfi_offset 14, -4
 883 0002 83B0     		sub	sp, sp, #12
 884              	.LCFI12:
 885              		.cfi_def_cfa_offset 24
 544:Src/main.c    **** 
 886              		.loc 1 544 0
 887 0004 0025     		movs	r5, #0
 888 0006 0095     		str	r5, [sp]
 889 0008 0195     		str	r5, [sp, #4]
 549:Src/main.c    ****   htim7.Init.Prescaler = 0;
 890              		.loc 1 549 0
 891 000a 0A4C     		ldr	r4, .L26
 892 000c 0A4B     		ldr	r3, .L26+4
 893 000e 2360     		str	r3, [r4]
 550:Src/main.c    ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 894              		.loc 1 550 0
 895 0010 6560     		str	r5, [r4, #4]
 551:Src/main.c    ****   htim7.Init.Period = 10000;
 896              		.loc 1 551 0
 897 0012 A560     		str	r5, [r4, #8]
 552:Src/main.c    ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 898              		.loc 1 552 0
 899 0014 42F21073 		movw	r3, #10000
 900 0018 E360     		str	r3, [r4, #12]
 553:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 901              		.loc 1 553 0
 902 001a A561     		str	r5, [r4, #24]
 554:Src/main.c    ****   {
 903              		.loc 1 554 0
 904 001c 2046     		mov	r0, r4
 905 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 906              	.LVL40:
 558:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 907              		.loc 1 558 0
 908 0022 0095     		str	r5, [sp]
 559:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 909              		.loc 1 559 0
 910 0024 0195     		str	r5, [sp, #4]
 560:Src/main.c    ****   {
 911              		.loc 1 560 0
 912 0026 6946     		mov	r1, sp
 913 0028 2046     		mov	r0, r4
 914 002a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 915              	.LVL41:
 568:Src/main.c    **** 
 916              		.loc 1 568 0
 917 002e 03B0     		add	sp, sp, #12
 918              	.LCFI13:
 919              		.cfi_def_cfa_offset 12
 920              		@ sp needed
ARM GAS  /tmp/ccn1DpdY.s 			page 33


 921 0030 30BD     		pop	{r4, r5, pc}
 922              	.L27:
 923 0032 00BF     		.align	2
 924              	.L26:
 925 0034 00000000 		.word	htim7
 926 0038 00140040 		.word	1073746944
 927              		.cfi_endproc
 928              	.LFE135:
 930              		.section	.text.SystemClock_Config,"ax",%progbits
 931              		.align	1
 932              		.global	SystemClock_Config
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.fpu fpv4-sp-d16
 938              	SystemClock_Config:
 939              	.LFB131:
 381:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 940              		.loc 1 381 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 80
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944 0000 30B5     		push	{r4, r5, lr}
 945              	.LCFI14:
 946              		.cfi_def_cfa_offset 12
 947              		.cfi_offset 4, -12
 948              		.cfi_offset 5, -8
 949              		.cfi_offset 14, -4
 950 0002 95B0     		sub	sp, sp, #84
 951              	.LCFI15:
 952              		.cfi_def_cfa_offset 96
 382:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 953              		.loc 1 382 0
 954 0004 3022     		movs	r2, #48
 955 0006 0021     		movs	r1, #0
 956 0008 08A8     		add	r0, sp, #32
 957 000a FFF7FEFF 		bl	memset
 958              	.LVL42:
 383:Src/main.c    **** 
 959              		.loc 1 383 0
 960 000e 0024     		movs	r4, #0
 961 0010 0394     		str	r4, [sp, #12]
 962 0012 0494     		str	r4, [sp, #16]
 963 0014 0594     		str	r4, [sp, #20]
 964 0016 0694     		str	r4, [sp, #24]
 965 0018 0794     		str	r4, [sp, #28]
 966              	.LBB10:
 387:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 967              		.loc 1 387 0
 968 001a 0194     		str	r4, [sp, #4]
 969 001c 1C4B     		ldr	r3, .L30
 970 001e 1A6C     		ldr	r2, [r3, #64]
 971 0020 42F08052 		orr	r2, r2, #268435456
 972 0024 1A64     		str	r2, [r3, #64]
 973 0026 1B6C     		ldr	r3, [r3, #64]
 974 0028 03F08053 		and	r3, r3, #268435456
 975 002c 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccn1DpdY.s 			page 34


 976 002e 019B     		ldr	r3, [sp, #4]
 977              	.LBE10:
 978              	.LBB11:
 388:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 979              		.loc 1 388 0
 980 0030 0294     		str	r4, [sp, #8]
 981 0032 184A     		ldr	r2, .L30+4
 982 0034 1368     		ldr	r3, [r2]
 983 0036 23F44043 		bic	r3, r3, #49152
 984 003a 43F48043 		orr	r3, r3, #16384
 985 003e 1360     		str	r3, [r2]
 986 0040 1368     		ldr	r3, [r2]
 987 0042 03F44043 		and	r3, r3, #49152
 988 0046 0293     		str	r3, [sp, #8]
 989 0048 029B     		ldr	r3, [sp, #8]
 990              	.LBE11:
 391:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 991              		.loc 1 391 0
 992 004a 0225     		movs	r5, #2
 993 004c 0895     		str	r5, [sp, #32]
 392:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 994              		.loc 1 392 0
 995 004e 0123     		movs	r3, #1
 996 0050 0B93     		str	r3, [sp, #44]
 393:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 997              		.loc 1 393 0
 998 0052 1023     		movs	r3, #16
 999 0054 0C93     		str	r3, [sp, #48]
 394:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1000              		.loc 1 394 0
 1001 0056 0E95     		str	r5, [sp, #56]
 395:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1002              		.loc 1 395 0
 1003 0058 0F94     		str	r4, [sp, #60]
 396:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 100;
 1004              		.loc 1 396 0
 1005 005a 0823     		movs	r3, #8
 1006 005c 1093     		str	r3, [sp, #64]
 397:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1007              		.loc 1 397 0
 1008 005e 6423     		movs	r3, #100
 1009 0060 1193     		str	r3, [sp, #68]
 398:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 1010              		.loc 1 398 0
 1011 0062 1295     		str	r5, [sp, #72]
 399:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1012              		.loc 1 399 0
 1013 0064 0723     		movs	r3, #7
 1014 0066 1393     		str	r3, [sp, #76]
 400:Src/main.c    ****   {
 1015              		.loc 1 400 0
 1016 0068 08A8     		add	r0, sp, #32
 1017 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1018              	.LVL43:
 406:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1019              		.loc 1 406 0
 1020 006e 0F23     		movs	r3, #15
ARM GAS  /tmp/ccn1DpdY.s 			page 35


 1021 0070 0393     		str	r3, [sp, #12]
 408:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1022              		.loc 1 408 0
 1023 0072 0495     		str	r5, [sp, #16]
 409:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1024              		.loc 1 409 0
 1025 0074 0594     		str	r4, [sp, #20]
 410:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1026              		.loc 1 410 0
 1027 0076 4FF4A053 		mov	r3, #5120
 1028 007a 0693     		str	r3, [sp, #24]
 411:Src/main.c    **** 
 1029              		.loc 1 411 0
 1030 007c 4FF48053 		mov	r3, #4096
 1031 0080 0793     		str	r3, [sp, #28]
 413:Src/main.c    ****   {
 1032              		.loc 1 413 0
 1033 0082 0321     		movs	r1, #3
 1034 0084 03A8     		add	r0, sp, #12
 1035 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1036              	.LVL44:
 417:Src/main.c    **** 
 1037              		.loc 1 417 0
 1038 008a 15B0     		add	sp, sp, #84
 1039              	.LCFI16:
 1040              		.cfi_def_cfa_offset 12
 1041              		@ sp needed
 1042 008c 30BD     		pop	{r4, r5, pc}
 1043              	.L31:
 1044 008e 00BF     		.align	2
 1045              	.L30:
 1046 0090 00380240 		.word	1073887232
 1047 0094 00700040 		.word	1073770496
 1048              		.cfi_endproc
 1049              	.LFE131:
 1051              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 1052              		.align	1
 1053              		.global	HAL_GPIO_EXTI_Callback
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	HAL_GPIO_EXTI_Callback:
 1060              	.LFB138:
 861:Src/main.c    **** 
 862:Src/main.c    **** /* USER CODE BEGIN 4 */
 863:Src/main.c    **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 1061              		.loc 1 863 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 1066              	.LVL45:
 1067 0000 7047     		bx	lr
 1068              		.cfi_endproc
 1069              	.LFE138:
 1071              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
ARM GAS  /tmp/ccn1DpdY.s 			page 36


 1072              		.align	1
 1073              		.global	HAL_TIM_PeriodElapsedCallback
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv4-sp-d16
 1079              	HAL_TIM_PeriodElapsedCallback:
 1080              	.LFB140:
 864:Src/main.c    ****   //Receive_MIDI(&hspi5, spi_rx_buffer);
 865:Src/main.c    **** }
 866:Src/main.c    **** 
 867:Src/main.c    **** void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 868:Src/main.c    ****   //  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 869:Src/main.c    ****   uint8_t uart_tx_buffer;
 870:Src/main.c    ****   /*
 871:Src/main.c    ****   struct midi_note_msg new_midi_note_msg = {
 872:Src/main.c    ****     spi_rx_buffer[0],
 873:Src/main.c    ****     spi_rx_buffer[1],
 874:Src/main.c    ****     spi_rx_buffer[2]
 875:Src/main.c    ****   };
 876:Src/main.c    **** 
 877:Src/main.c    ****   enqueue(new_midi_note_msg);
 878:Src/main.c    ****   */
 879:Src/main.c    **** 
 880:Src/main.c    **** 
 881:Src/main.c    ****   if(spi_rx_buffer[0] == MIDI_NOTE_ON){
 882:Src/main.c    ****     uart_tx_buffer = 'n';
 883:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 884:Src/main.c    ****     uart_tx_buffer = '\n';
 885:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 886:Src/main.c    ****   }
 887:Src/main.c    ****   else if (spi_rx_buffer[0] == MIDI_NOTE_OFF){
 888:Src/main.c    ****     uart_tx_buffer = 'f';
 889:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 890:Src/main.c    ****     uart_tx_buffer = '\n';
 891:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 892:Src/main.c    ****   }
 893:Src/main.c    ****   /*
 894:Src/main.c    ****   else if (spi_rx_buffer[0] == ATTACK_CC){
 895:Src/main.c    ****     uart_tx_buffer = 'a';
 896:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 897:Src/main.c    ****   }
 898:Src/main.c    ****   else if (spi_rx_buffer[0] == DECAY_CC){
 899:Src/main.c    ****     uart_tx_buffer = 'd';
 900:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 901:Src/main.c    ****   }
 902:Src/main.c    ****   else if (spi_rx_buffer[0] == SUSTAIN_CC){
 903:Src/main.c    ****     uart_tx_buffer = 's';
 904:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 905:Src/main.c    ****   }
 906:Src/main.c    ****   else if (spi_rx_buffer[0] == RELEASE_CC){
 907:Src/main.c    ****     uart_tx_buffer = 'r';
 908:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 909:Src/main.c    ****   }
 910:Src/main.c    ****   else {
 911:Src/main.c    ****     uart_tx_buffer = 'z';
 912:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
ARM GAS  /tmp/ccn1DpdY.s 			page 37


 913:Src/main.c    ****   }
 914:Src/main.c    ****   */
 915:Src/main.c    **** 
 916:Src/main.c    **** 
 917:Src/main.c    **** 
 918:Src/main.c    ****   MIDI_flag = 1;
 919:Src/main.c    ****   enqueue_byte(spi_rx_buffer[0]);
 920:Src/main.c    **** 
 921:Src/main.c    ****   /*
 922:Src/main.c    ****   if(note_on_flag){
 923:Src/main.c    ****     struct midi_msg new_midi_note_msg = {
 924:Src/main.c    ****       MIDI_NOTE_ON,
 925:Src/main.c    ****       spi_rx_buffer[0],
 926:Src/main.c    ****       127,
 927:Src/main.c    ****       0
 928:Src/main.c    ****     };
 929:Src/main.c    ****     enqueue(new_midi_note_msg);
 930:Src/main.c    ****     note_on_flag = 0;
 931:Src/main.c    ****   }
 932:Src/main.c    ****   else if(note_off_flag){
 933:Src/main.c    ****     struct midi_msg new_midi_note_msg = {
 934:Src/main.c    ****       MIDI_NOTE_OFF,
 935:Src/main.c    ****       spi_rx_buffer[0],
 936:Src/main.c    ****       0,
 937:Src/main.c    ****       0
 938:Src/main.c    ****     };
 939:Src/main.c    ****     enqueue(new_midi_note_msg);
 940:Src/main.c    ****     note_off_flag = 0;
 941:Src/main.c    ****   }
 942:Src/main.c    ****   else if(attack_cc_flag){
 943:Src/main.c    ****     struct midi_msg new_cc = {
 944:Src/main.c    ****       ATTACK_CC,
 945:Src/main.c    ****       spi_rx_buffer[0],
 946:Src/main.c    ****       0,
 947:Src/main.c    ****       0
 948:Src/main.c    ****     };
 949:Src/main.c    ****     enqueue(new_cc);
 950:Src/main.c    ****     attack_cc_flag = 0;
 951:Src/main.c    ****   }
 952:Src/main.c    ****   else if(decay_cc_flag){
 953:Src/main.c    ****     struct midi_msg new_cc = {
 954:Src/main.c    ****       DECAY_CC,
 955:Src/main.c    ****       spi_rx_buffer[0],
 956:Src/main.c    ****       0,
 957:Src/main.c    ****       0
 958:Src/main.c    ****     };
 959:Src/main.c    ****     enqueue(new_cc);
 960:Src/main.c    ****     decay_cc_flag = 0;
 961:Src/main.c    ****   }
 962:Src/main.c    ****   else if(sustain_cc_flag){
 963:Src/main.c    ****     struct midi_msg new_cc = {
 964:Src/main.c    ****       SUSTAIN_CC,
 965:Src/main.c    ****       spi_rx_buffer[0],
 966:Src/main.c    ****       0,
 967:Src/main.c    ****       0
 968:Src/main.c    ****     };
 969:Src/main.c    ****     enqueue(new_cc);
ARM GAS  /tmp/ccn1DpdY.s 			page 38


 970:Src/main.c    ****     sustain_cc_flag = 0;
 971:Src/main.c    ****   }
 972:Src/main.c    ****   else if(release_cc_flag){
 973:Src/main.c    ****     struct midi_msg new_cc = {
 974:Src/main.c    ****       RELEASE_CC,
 975:Src/main.c    ****       spi_rx_buffer[0],
 976:Src/main.c    ****       0,
 977:Src/main.c    ****       0
 978:Src/main.c    ****     };
 979:Src/main.c    ****     enqueue(new_cc);
 980:Src/main.c    ****     release_cc_flag = 0;
 981:Src/main.c    ****   }
 982:Src/main.c    ****   */
 983:Src/main.c    **** }
 984:Src/main.c    **** 
 985:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 1081              		.loc 1 985 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              		@ link register save eliminated.
 1086              	.LVL46:
 986:Src/main.c    ****   if(htim->Instance == TIM6){
 1087              		.loc 1 986 0
 1088 0000 0268     		ldr	r2, [r0]
 1089 0002 044B     		ldr	r3, .L36
 1090 0004 9A42     		cmp	r2, r3
 1091 0006 00D0     		beq	.L35
 1092              	.L33:
 1093 0008 7047     		bx	lr
 1094              	.L35:
 987:Src/main.c    ****     //  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_1);
 988:Src/main.c    ****     update_value_flag = 1;
 1095              		.loc 1 988 0
 1096 000a 0122     		movs	r2, #1
 1097 000c 024B     		ldr	r3, .L36+4
 1098 000e 1A70     		strb	r2, [r3]
 989:Src/main.c    ****   }
 990:Src/main.c    ****   /*
 991:Src/main.c    ****   else if(htim->Instance == TIM7){
 992:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 993:Src/main.c    ****     for(int i = 0; i < VOICES; i++){
 994:Src/main.c    ****       if(note_on[i] == MIDI_NOTE_ON){
 995:Src/main.c    ****         if(env_state[i] == NOT_TRIGGERED){
 996:Src/main.c    ****           env_state[i] = ATTACK_MODE;
 997:Src/main.c    ****         }
 998:Src/main.c    ****         else{
 999:Src/main.c    ****           env_state[i] = RELEASE_MODE;
1000:Src/main.c    ****         }
1001:Src/main.c    ****       }
1002:Src/main.c    ****     }
1003:Src/main.c    ****   }
1004:Src/main.c    ****   */
1005:Src/main.c    **** }
 1099              		.loc 1 1005 0
 1100 0010 FAE7     		b	.L33
 1101              	.L37:
ARM GAS  /tmp/ccn1DpdY.s 			page 39


 1102 0012 00BF     		.align	2
 1103              	.L36:
 1104 0014 00100040 		.word	1073745920
 1105 0018 00000000 		.word	.LANCHOR0
 1106              		.cfi_endproc
 1107              	.LFE140:
 1109              		.global	__aeabi_f2d
 1110              		.global	__aeabi_dmul
 1111              		.global	__aeabi_d2uiz
 1112              		.section	.text.UpdateOutputValue,"ax",%progbits
 1113              		.align	1
 1114              		.global	UpdateOutputValue
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	UpdateOutputValue:
 1121              	.LFB141:
1006:Src/main.c    **** 
1007:Src/main.c    **** void UpdateOutputValue() {
 1122              		.loc 1 1007 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 8
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126 0000 10B5     		push	{r4, lr}
 1127              	.LCFI17:
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 4, -8
 1130              		.cfi_offset 14, -4
 1131 0002 2DED028B 		vpush.64	{d8}
 1132              	.LCFI18:
 1133              		.cfi_def_cfa_offset 16
 1134              		.cfi_offset 80, -16
 1135              		.cfi_offset 81, -12
 1136 0006 82B0     		sub	sp, sp, #8
 1137              	.LCFI19:
 1138              		.cfi_def_cfa_offset 24
 1139              	.LVL47:
1008:Src/main.c    ****   //  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
1009:Src/main.c    ****   float val = 0;
1010:Src/main.c    ****   output_val = 0;
 1140              		.loc 1 1010 0
 1141 0008 0024     		movs	r4, #0
 1142 000a 294B     		ldr	r3, .L42+8
 1143 000c 1C70     		strb	r4, [r3]
 1144              	.LVL48:
1009:Src/main.c    ****   output_val = 0;
 1145              		.loc 1 1009 0
 1146 000e 9FED298A 		vldr.32	s16, .L42+12
 1147              	.LBB12:
1011:Src/main.c    ****   for(int i = 0; i < VOICES; i++) {
 1148              		.loc 1 1011 0
 1149 0012 37E0     		b	.L39
 1150              	.LVL49:
 1151              	.L40:
1012:Src/main.c    ****     phase_accumulator[i] += (uint32_t)(midi_notes[note_freq[i]]*DDS_SCALE_FACTOR);
 1152              		.loc 1 1012 0 discriminator 3
ARM GAS  /tmp/ccn1DpdY.s 			page 40


 1153 0014 284B     		ldr	r3, .L42+16
 1154 0016 1A5D     		ldrb	r2, [r3, r4]	@ zero_extendqisi2
 1155 0018 284B     		ldr	r3, .L42+20
 1156 001a 03EB8203 		add	r3, r3, r2, lsl #2
 1157 001e 1868     		ldr	r0, [r3]	@ float
 1158 0020 FFF7FEFF 		bl	__aeabi_f2d
 1159              	.LVL50:
 1160 0024 20A3     		adr	r3, .L42
 1161 0026 D3E90023 		ldrd	r2, [r3]
 1162 002a FFF7FEFF 		bl	__aeabi_dmul
 1163              	.LVL51:
 1164 002e FFF7FEFF 		bl	__aeabi_d2uiz
 1165              	.LVL52:
 1166 0032 234B     		ldr	r3, .L42+24
 1167 0034 53F82420 		ldr	r2, [r3, r4, lsl #2]
 1168 0038 1044     		add	r0, r0, r2
 1169 003a 43F82400 		str	r0, [r3, r4, lsl #2]
1013:Src/main.c    ****     val += ((base_sine[(phase_accumulator[i]>>10)%4096] + 0*base_pos_saw[(phase_accumulator[i]>>10)
 1170              		.loc 1 1013 0 discriminator 3
 1171 003e 53F82420 		ldr	r2, [r3, r4, lsl #2]
 1172 0042 53F82430 		ldr	r3, [r3, r4, lsl #2]
 1173 0046 C3F38B23 		ubfx	r3, r3, #10, #12
 1174 004a 1E4A     		ldr	r2, .L42+28
 1175 004c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1176 004e 07EE903A 		vmov	s15, r3	@ int
 1177 0052 1D4B     		ldr	r3, .L42+32
 1178 0054 03EB8403 		add	r3, r3, r4, lsl #2
 1179 0058 93ED007A 		vldr.32	s14, [r3]
 1180 005c F8EEE77A 		vcvt.f32.s32	s15, s15
 1181 0060 27EE877A 		vmul.f32	s14, s15, s14
 1182 0064 194B     		ldr	r3, .L42+36
 1183 0066 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 1184 0068 DBB2     		uxtb	r3, r3
 1185 006a 07EE903A 		vmov	s15, r3	@ int
 1186 006e F8EEE77A 		vcvt.f32.s32	s15, s15
 1187 0072 67EE877A 		vmul.f32	s15, s15, s14
 1188 0076 DFED166A 		vldr.32	s13, .L42+40
 1189 007a 87EEA67A 		vdiv.f32	s14, s15, s13
 1190 007e 38EE078A 		vadd.f32	s16, s16, s14
 1191              	.LVL53:
1011:Src/main.c    ****   for(int i = 0; i < VOICES; i++) {
 1192              		.loc 1 1011 0 discriminator 3
 1193 0082 0134     		adds	r4, r4, #1
 1194              	.LVL54:
 1195              	.L39:
1011:Src/main.c    ****   for(int i = 0; i < VOICES; i++) {
 1196              		.loc 1 1011 0 is_stmt 0 discriminator 1
 1197 0084 0F2C     		cmp	r4, #15
 1198 0086 C5DD     		ble	.L40
 1199              	.LBE12:
1014:Src/main.c    ****   }
1015:Src/main.c    **** 
1016:Src/main.c    ****   output_val = (uint8_t) (val / VOICES);
 1200              		.loc 1 1016 0 is_stmt 1
 1201 0088 DFED127A 		vldr.32	s15, .L42+44
 1202 008c 28EE278A 		vmul.f32	s16, s16, s15
 1203              	.LVL55:
ARM GAS  /tmp/ccn1DpdY.s 			page 41


 1204 0090 FCEEC87A 		vcvt.u32.f32	s15, s16
 1205 0094 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1206 0098 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 1207 009c 044A     		ldr	r2, .L42+8
 1208 009e 1370     		strb	r3, [r2]
1017:Src/main.c    **** }
 1209              		.loc 1 1017 0
 1210 00a0 02B0     		add	sp, sp, #8
 1211              	.LCFI20:
 1212              		.cfi_def_cfa_offset 16
 1213              		@ sp needed
 1214 00a2 BDEC028B 		vldm	sp!, {d8}
 1215              	.LCFI21:
 1216              		.cfi_restore 80
 1217              		.cfi_restore 81
 1218              		.cfi_def_cfa_offset 8
 1219 00a6 10BD     		pop	{r4, pc}
 1220              	.LVL56:
 1221              	.L43:
 1222              		.align	3
 1223              	.L42:
 1224 00a8 942EA292 		.word	2460102292
 1225 00ac 5F5E5640 		.word	1079402079
 1226 00b0 00000000 		.word	.LANCHOR1
 1227 00b4 00000000 		.word	0
 1228 00b8 00000000 		.word	.LANCHOR2
 1229 00bc 00000000 		.word	midi_notes
 1230 00c0 00000000 		.word	.LANCHOR3
 1231 00c4 00000000 		.word	base_sine
 1232 00c8 00000000 		.word	.LANCHOR4
 1233 00cc 00000000 		.word	.LANCHOR5
 1234 00d0 0001FE47 		.word	1207828736
 1235 00d4 0000803D 		.word	1031798784
 1236              		.cfi_endproc
 1237              	.LFE141:
 1239              		.global	__aeabi_i2d
 1240              		.section	.text.UpdateLFOs,"ax",%progbits
 1241              		.align	1
 1242              		.global	UpdateLFOs
 1243              		.syntax unified
 1244              		.thumb
 1245              		.thumb_func
 1246              		.fpu fpv4-sp-d16
 1248              	UpdateLFOs:
 1249              	.LFB142:
1018:Src/main.c    **** 
1019:Src/main.c    **** void UpdateLFOs() {
 1250              		.loc 1 1019 0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 0
 1253              		@ frame_needed = 0, uses_anonymous_args = 0
 1254 0000 10B5     		push	{r4, lr}
 1255              	.LCFI22:
 1256              		.cfi_def_cfa_offset 8
 1257              		.cfi_offset 4, -8
 1258              		.cfi_offset 14, -4
 1259              	.LVL57:
ARM GAS  /tmp/ccn1DpdY.s 			page 42


 1260              	.LBB13:
1020:Src/main.c    ****   for(int i = 0; i < VOICES; i++) {
 1261              		.loc 1 1020 0
 1262 0002 0024     		movs	r4, #0
 1263 0004 16E0     		b	.L45
 1264              	.LVL58:
 1265              	.L46:
1021:Src/main.c    ****     lfo_phase_accumulator[i] += (uint32_t)(lfo_freq[i] * (DDS_SCALE_FACTOR/10));
 1266              		.loc 1 1021 0 discriminator 3
 1267 0006 104B     		ldr	r3, .L48+8
 1268 0008 33F81400 		ldrh	r0, [r3, r4, lsl #1]
 1269 000c 80B2     		uxth	r0, r0
 1270 000e FFF7FEFF 		bl	__aeabi_i2d
 1271              	.LVL59:
 1272 0012 0BA3     		adr	r3, .L48
 1273 0014 D3E90023 		ldrd	r2, [r3]
 1274 0018 FFF7FEFF 		bl	__aeabi_dmul
 1275              	.LVL60:
 1276 001c FFF7FEFF 		bl	__aeabi_d2uiz
 1277              	.LVL61:
 1278 0020 0A4A     		ldr	r2, .L48+12
 1279 0022 52F82430 		ldr	r3, [r2, r4, lsl #2]
 1280 0026 1844     		add	r0, r0, r3
 1281 0028 42F82400 		str	r0, [r2, r4, lsl #2]
1022:Src/main.c    ****     //lfo[i] = base_tri[(lfo_phase_accumulator[i]>>10)%4096];
1023:Src/main.c    ****     lfo[i] = 255;
 1282              		.loc 1 1023 0 discriminator 3
 1283 002c FF22     		movs	r2, #255
 1284 002e 084B     		ldr	r3, .L48+16
 1285 0030 1A55     		strb	r2, [r3, r4]
1020:Src/main.c    ****     lfo_phase_accumulator[i] += (uint32_t)(lfo_freq[i] * (DDS_SCALE_FACTOR/10));
 1286              		.loc 1 1020 0 discriminator 3
 1287 0032 0134     		adds	r4, r4, #1
 1288              	.LVL62:
 1289              	.L45:
1020:Src/main.c    ****     lfo_phase_accumulator[i] += (uint32_t)(lfo_freq[i] * (DDS_SCALE_FACTOR/10));
 1290              		.loc 1 1020 0 is_stmt 0 discriminator 1
 1291 0034 0F2C     		cmp	r4, #15
 1292 0036 E6DD     		ble	.L46
 1293              	.LBE13:
1024:Src/main.c    ****   }
1025:Src/main.c    **** }
 1294              		.loc 1 1025 0 is_stmt 1
 1295 0038 10BD     		pop	{r4, pc}
 1296              	.LVL63:
 1297              	.L49:
 1298 003a 00BFAFF3 		.align	3
 1298      0080
 1299              	.L48:
 1300 0040 76581B42 		.word	1109088374
 1301 0044 19E52140 		.word	1075963161
 1302 0048 00000000 		.word	.LANCHOR6
 1303 004c 00000000 		.word	.LANCHOR7
 1304 0050 00000000 		.word	.LANCHOR5
 1305              		.cfi_endproc
 1306              	.LFE142:
 1308              		.section	.text.UpdateEnvelope,"ax",%progbits
ARM GAS  /tmp/ccn1DpdY.s 			page 43


 1309              		.align	1
 1310              		.global	UpdateEnvelope
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
 1314              		.fpu fpv4-sp-d16
 1316              	UpdateEnvelope:
 1317              	.LFB143:
1026:Src/main.c    **** 
1027:Src/main.c    **** void UpdateEnvelope() {
 1318              		.loc 1 1027 0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322 0000 70B5     		push	{r4, r5, r6, lr}
 1323              	.LCFI23:
 1324              		.cfi_def_cfa_offset 16
 1325              		.cfi_offset 4, -16
 1326              		.cfi_offset 5, -12
 1327              		.cfi_offset 6, -8
 1328              		.cfi_offset 14, -4
 1329              	.LVL64:
 1330              	.LBB14:
1028:Src/main.c    ****   for(int i = 0; i < VOICES; i++){
 1331              		.loc 1 1028 0
 1332 0002 0024     		movs	r4, #0
 1333 0004 09E0     		b	.L51
 1334              	.LVL65:
 1335              	.L53:
1029:Src/main.c    ****     //if(note_on[i] == MIDI_NOTE_OFF){
1030:Src/main.c    ****     //  env_state[i] = RELEASE_MODE;
1031:Src/main.c    ****     //}
1032:Src/main.c    **** 
1033:Src/main.c    ****     switch(env_state[i]){
1034:Src/main.c    ****     case NOT_TRIGGERED:
1035:Src/main.c    ****       envelope_index[i] = 0;
 1336              		.loc 1 1035 0
 1337 0006 0022     		movs	r2, #0
 1338 0008 5F4B     		ldr	r3, .L64+8
 1339 000a 43F82420 		str	r2, [r3, r4, lsl #2]
1036:Src/main.c    ****       envelope[i] = 0;
 1340              		.loc 1 1036 0
 1341 000e 5F4B     		ldr	r3, .L64+12
 1342 0010 03EB8403 		add	r3, r3, r4, lsl #2
 1343 0014 0022     		movs	r2, #0
 1344 0016 1A60     		str	r2, [r3]	@ float
 1345              	.L52:
1028:Src/main.c    ****   for(int i = 0; i < VOICES; i++){
 1346              		.loc 1 1028 0 discriminator 2
 1347 0018 0134     		adds	r4, r4, #1
 1348              	.LVL66:
 1349              	.L51:
1028:Src/main.c    ****   for(int i = 0; i < VOICES; i++){
 1350              		.loc 1 1028 0 is_stmt 0 discriminator 1
 1351 001a 0F2C     		cmp	r4, #15
 1352 001c 00F3AE80 		bgt	.L63
1033:Src/main.c    ****     case NOT_TRIGGERED:
ARM GAS  /tmp/ccn1DpdY.s 			page 44


 1353              		.loc 1 1033 0 is_stmt 1
 1354 0020 5B4B     		ldr	r3, .L64+16
 1355 0022 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 1356 0024 DBB2     		uxtb	r3, r3
 1357 0026 042B     		cmp	r3, #4
 1358 0028 F6D8     		bhi	.L52
 1359 002a 01A2     		adr	r2, .L54
 1360 002c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1361              		.p2align 2
 1362              	.L54:
 1363 0030 07000000 		.word	.L53+1
 1364 0034 45000000 		.word	.L55+1
 1365 0038 A3000000 		.word	.L56+1
 1366 003c 19000000 		.word	.L52+1
 1367 0040 07010000 		.word	.L57+1
 1368              		.p2align 1
 1369              	.L55:
1037:Src/main.c    ****       break;
1038:Src/main.c    ****     case ATTACK_MODE:
1039:Src/main.c    ****       //    if((UINT32_MAX - envelope_index) < DDS_SCALE_FACTOR){
1040:Src/main.c    ****       if(envelope_index[i] <= 4200000) {
 1370              		.loc 1 1040 0
 1371 0044 504B     		ldr	r3, .L64+8
 1372 0046 53F82420 		ldr	r2, [r3, r4, lsl #2]
 1373 004a 524B     		ldr	r3, .L64+20
 1374 004c 9A42     		cmp	r2, r3
 1375 004e 20D8     		bhi	.L58
1041:Src/main.c    ****         envelope_index[i] += (uint32_t)(attack * DDS_SCALE_FACTOR);
 1376              		.loc 1 1041 0
 1377 0050 4D4D     		ldr	r5, .L64+8
 1378 0052 55F82460 		ldr	r6, [r5, r4, lsl #2]
 1379 0056 504B     		ldr	r3, .L64+24
 1380 0058 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1381 005a FFF7FEFF 		bl	__aeabi_i2d
 1382              	.LVL67:
 1383 005e 48A3     		adr	r3, .L64
 1384 0060 D3E90023 		ldrd	r2, [r3]
 1385 0064 FFF7FEFF 		bl	__aeabi_dmul
 1386              	.LVL68:
 1387 0068 FFF7FEFF 		bl	__aeabi_d2uiz
 1388              	.LVL69:
 1389 006c 3044     		add	r0, r0, r6
 1390 006e 45F82400 		str	r0, [r5, r4, lsl #2]
1042:Src/main.c    ****         envelope[i] = base_pos_saw[(envelope_index[i]>>10)%4096];
 1391              		.loc 1 1042 0
 1392 0072 55F82430 		ldr	r3, [r5, r4, lsl #2]
 1393 0076 C3F38B23 		ubfx	r3, r3, #10, #12
 1394 007a 484A     		ldr	r2, .L64+28
 1395 007c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1396 007e 07EE903A 		vmov	s15, r3	@ int
 1397 0082 F8EE677A 		vcvt.f32.u32	s15, s15
 1398 0086 414B     		ldr	r3, .L64+12
 1399 0088 03EB8403 		add	r3, r3, r4, lsl #2
 1400 008c C3ED007A 		vstr.32	s15, [r3]
 1401 0090 C2E7     		b	.L52
 1402              	.L58:
1043:Src/main.c    ****       }
ARM GAS  /tmp/ccn1DpdY.s 			page 45


1044:Src/main.c    ****       else {
1045:Src/main.c    ****         // env_state++;
1046:Src/main.c    ****         envelope_index[i] = 0;
 1403              		.loc 1 1046 0
 1404 0092 0022     		movs	r2, #0
 1405 0094 3C4B     		ldr	r3, .L64+8
 1406 0096 43F82420 		str	r2, [r3, r4, lsl #2]
1047:Src/main.c    ****         env_state[i] = DECAY_MODE;
 1407              		.loc 1 1047 0
 1408 009a 0222     		movs	r2, #2
 1409 009c 3C4B     		ldr	r3, .L64+16
 1410 009e 1A55     		strb	r2, [r3, r4]
 1411 00a0 BAE7     		b	.L52
 1412              	.L56:
1048:Src/main.c    ****       }
1049:Src/main.c    ****       break;
1050:Src/main.c    ****     case DECAY_MODE:
1051:Src/main.c    ****       if(base_neg_saw[(envelope_index[i]>>10)%4096] >= sustain){
 1413              		.loc 1 1051 0
 1414 00a2 394B     		ldr	r3, .L64+8
 1415 00a4 53F82430 		ldr	r3, [r3, r4, lsl #2]
 1416 00a8 C3F38B23 		ubfx	r3, r3, #10, #12
 1417 00ac 3C4A     		ldr	r2, .L64+32
 1418 00ae D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1419 00b0 3C4B     		ldr	r3, .L64+36
 1420 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421 00b4 9A42     		cmp	r2, r3
 1422 00b6 20D3     		bcc	.L59
1052:Src/main.c    ****         envelope_index[i] += (uint32_t)(decay * DDS_SCALE_FACTOR);
 1423              		.loc 1 1052 0
 1424 00b8 334D     		ldr	r5, .L64+8
 1425 00ba 55F82460 		ldr	r6, [r5, r4, lsl #2]
 1426 00be 3A4B     		ldr	r3, .L64+40
 1427 00c0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1428 00c2 FFF7FEFF 		bl	__aeabi_i2d
 1429              	.LVL70:
 1430 00c6 2EA3     		adr	r3, .L64
 1431 00c8 D3E90023 		ldrd	r2, [r3]
 1432 00cc FFF7FEFF 		bl	__aeabi_dmul
 1433              	.LVL71:
 1434 00d0 FFF7FEFF 		bl	__aeabi_d2uiz
 1435              	.LVL72:
 1436 00d4 3044     		add	r0, r0, r6
 1437 00d6 45F82400 		str	r0, [r5, r4, lsl #2]
1053:Src/main.c    ****         envelope[i] = base_neg_saw[(envelope_index[i]>>10)%4096];
 1438              		.loc 1 1053 0
 1439 00da 55F82430 		ldr	r3, [r5, r4, lsl #2]
 1440 00de C3F38B23 		ubfx	r3, r3, #10, #12
 1441 00e2 2F4A     		ldr	r2, .L64+32
 1442 00e4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1443 00e6 07EE903A 		vmov	s15, r3	@ int
 1444 00ea F8EE677A 		vcvt.f32.u32	s15, s15
 1445 00ee 274B     		ldr	r3, .L64+12
 1446 00f0 03EB8403 		add	r3, r3, r4, lsl #2
 1447 00f4 C3ED007A 		vstr.32	s15, [r3]
 1448 00f8 8EE7     		b	.L52
 1449              	.L59:
ARM GAS  /tmp/ccn1DpdY.s 			page 46


1054:Src/main.c    ****       }
1055:Src/main.c    ****       else {
1056:Src/main.c    ****         //envelope_index[i] = 0;
1057:Src/main.c    ****         env_state[i]++;
 1450              		.loc 1 1057 0
 1451 00fa 254A     		ldr	r2, .L64+16
 1452 00fc 135D     		ldrb	r3, [r2, r4]	@ zero_extendqisi2
 1453 00fe 0133     		adds	r3, r3, #1
 1454 0100 DBB2     		uxtb	r3, r3
 1455 0102 1355     		strb	r3, [r2, r4]
 1456 0104 88E7     		b	.L52
 1457              	.L57:
1058:Src/main.c    ****         //env_state[i] = RELEASE_MODE;
1059:Src/main.c    ****       }
1060:Src/main.c    ****       break;
1061:Src/main.c    ****     case SUSTAIN_MODE:
1062:Src/main.c    ****       //env_state[i]++;
1063:Src/main.c    ****       break;
1064:Src/main.c    ****     case RELEASE_MODE:
1065:Src/main.c    ****       //      if((UINT32_MAX - envelope_index) < DDS_SCALE_FACTOR){
1066:Src/main.c    ****       if(envelope_index[i] <= 4200000){
 1458              		.loc 1 1066 0
 1459 0106 204B     		ldr	r3, .L64+8
 1460 0108 53F82420 		ldr	r2, [r3, r4, lsl #2]
 1461 010c 214B     		ldr	r3, .L64+20
 1462 010e 9A42     		cmp	r2, r3
 1463 0110 20D8     		bhi	.L60
1067:Src/main.c    ****         envelope_index[i] += (uint32_t)(release * DDS_SCALE_FACTOR);
 1464              		.loc 1 1067 0
 1465 0112 1D4D     		ldr	r5, .L64+8
 1466 0114 55F82460 		ldr	r6, [r5, r4, lsl #2]
 1467 0118 244B     		ldr	r3, .L64+44
 1468 011a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1469 011c FFF7FEFF 		bl	__aeabi_i2d
 1470              	.LVL73:
 1471 0120 17A3     		adr	r3, .L64
 1472 0122 D3E90023 		ldrd	r2, [r3]
 1473 0126 FFF7FEFF 		bl	__aeabi_dmul
 1474              	.LVL74:
 1475 012a FFF7FEFF 		bl	__aeabi_d2uiz
 1476              	.LVL75:
 1477 012e 3044     		add	r0, r0, r6
 1478 0130 45F82400 		str	r0, [r5, r4, lsl #2]
1068:Src/main.c    ****         envelope[i] = base_neg_saw[(envelope_index[i]>>10)%4096];
 1479              		.loc 1 1068 0
 1480 0134 55F82430 		ldr	r3, [r5, r4, lsl #2]
 1481 0138 C3F38B23 		ubfx	r3, r3, #10, #12
 1482 013c 184A     		ldr	r2, .L64+32
 1483 013e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1484 0140 07EE903A 		vmov	s15, r3	@ int
 1485 0144 F8EE677A 		vcvt.f32.u32	s15, s15
 1486 0148 104B     		ldr	r3, .L64+12
 1487 014a 03EB8403 		add	r3, r3, r4, lsl #2
 1488 014e C3ED007A 		vstr.32	s15, [r3]
 1489 0152 61E7     		b	.L52
 1490              	.L60:
1069:Src/main.c    ****       }
ARM GAS  /tmp/ccn1DpdY.s 			page 47


1070:Src/main.c    ****       else {
1071:Src/main.c    ****         env_state[i] = NOT_TRIGGERED;
 1491              		.loc 1 1071 0
 1492 0154 0023     		movs	r3, #0
 1493 0156 0E4A     		ldr	r2, .L64+16
 1494 0158 1355     		strb	r3, [r2, r4]
1072:Src/main.c    ****         note_on[i] = MIDI_NOTE_OFF;
 1495              		.loc 1 1072 0
 1496 015a 8021     		movs	r1, #128
 1497 015c 144A     		ldr	r2, .L64+48
 1498 015e 1155     		strb	r1, [r2, r4]
1073:Src/main.c    ****         envelope_index[i] = 0;
 1499              		.loc 1 1073 0
 1500 0160 094A     		ldr	r2, .L64+8
 1501 0162 42F82430 		str	r3, [r2, r4, lsl #2]
1074:Src/main.c    ****         envelope[i] = 0;
 1502              		.loc 1 1074 0
 1503 0166 094A     		ldr	r2, .L64+12
 1504 0168 02EB8402 		add	r2, r2, r4, lsl #2
 1505 016c 0021     		movs	r1, #0
 1506 016e 1160     		str	r1, [r2]	@ float
1075:Src/main.c    ****         lfo_phase_accumulator[i] = 0;
 1507              		.loc 1 1075 0
 1508 0170 104A     		ldr	r2, .L64+52
 1509 0172 42F82430 		str	r3, [r2, r4, lsl #2]
1076:Src/main.c    ****         lfo[i] = 0;
 1510              		.loc 1 1076 0
 1511 0176 104A     		ldr	r2, .L64+56
 1512 0178 1355     		strb	r3, [r2, r4]
 1513 017a 4DE7     		b	.L52
 1514              	.L63:
 1515              	.LBE14:
1077:Src/main.c    ****       }
1078:Src/main.c    ****       break;
1079:Src/main.c    ****     }
1080:Src/main.c    ****   }
1081:Src/main.c    **** }
 1516              		.loc 1 1081 0
 1517 017c 70BD     		pop	{r4, r5, r6, pc}
 1518              	.LVL76:
 1519              	.L65:
 1520 017e 00BF     		.align	3
 1521              	.L64:
 1522 0180 942EA292 		.word	2460102292
 1523 0184 5F5E5640 		.word	1079402079
 1524 0188 00000000 		.word	.LANCHOR8
 1525 018c 00000000 		.word	.LANCHOR4
 1526 0190 00000000 		.word	env_state
 1527 0194 40164000 		.word	4200000
 1528 0198 00000000 		.word	.LANCHOR9
 1529 019c 00000000 		.word	base_pos_saw
 1530 01a0 00000000 		.word	base_neg_saw
 1531 01a4 00000000 		.word	.LANCHOR10
 1532 01a8 00000000 		.word	.LANCHOR11
 1533 01ac 00000000 		.word	.LANCHOR12
 1534 01b0 00000000 		.word	.LANCHOR13
 1535 01b4 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccn1DpdY.s 			page 48


 1536 01b8 00000000 		.word	.LANCHOR5
 1537              		.cfi_endproc
 1538              	.LFE143:
 1540              		.section	.text.Update_R2R_DAC,"ax",%progbits
 1541              		.align	1
 1542              		.global	Update_R2R_DAC
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
 1548              	Update_R2R_DAC:
 1549              	.LFB144:
1082:Src/main.c    **** 
1083:Src/main.c    **** void Update_R2R_DAC() {
 1550              		.loc 1 1083 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 1554 0000 08B5     		push	{r3, lr}
 1555              	.LCFI24:
 1556              		.cfi_def_cfa_offset 8
 1557              		.cfi_offset 3, -8
 1558              		.cfi_offset 14, -4
1084:Src/main.c    ****   ((output_val>>0)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET) : HAL_GPIO_Write
 1559              		.loc 1 1084 0
 1560 0002 474B     		ldr	r3, .L85
 1561 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1562 0006 13F0010F 		tst	r3, #1
 1563 000a 51D0     		beq	.L67
 1564              		.loc 1 1084 0 is_stmt 0 discriminator 1
 1565 000c 0122     		movs	r2, #1
 1566 000e 8021     		movs	r1, #128
 1567 0010 4448     		ldr	r0, .L85+4
 1568 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1569              	.LVL77:
 1570              	.L68:
1085:Src/main.c    ****   ((output_val>>1)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET) : HAL_GPIO_Write
 1571              		.loc 1 1085 0 is_stmt 1
 1572 0016 424B     		ldr	r3, .L85
 1573 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1574 001a 13F0020F 		tst	r3, #2
 1575 001e 4DD0     		beq	.L69
 1576              		.loc 1 1085 0 is_stmt 0 discriminator 1
 1577 0020 0122     		movs	r2, #1
 1578 0022 4FF48071 		mov	r1, #256
 1579 0026 3F48     		ldr	r0, .L85+4
 1580 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1581              	.LVL78:
 1582              	.L70:
1086:Src/main.c    ****   ((output_val>>2)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET) : HAL_GPIO_Write
 1583              		.loc 1 1086 0 is_stmt 1
 1584 002c 3C4B     		ldr	r3, .L85
 1585 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1586 0030 13F0040F 		tst	r3, #4
 1587 0034 49D0     		beq	.L71
 1588              		.loc 1 1086 0 is_stmt 0 discriminator 1
 1589 0036 0122     		movs	r2, #1
ARM GAS  /tmp/ccn1DpdY.s 			page 49


 1590 0038 4FF40071 		mov	r1, #512
 1591 003c 3948     		ldr	r0, .L85+4
 1592 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1593              	.LVL79:
 1594              	.L72:
1087:Src/main.c    ****   ((output_val>>3)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET) : HAL_GPIO_Writ
 1595              		.loc 1 1087 0 is_stmt 1
 1596 0042 374B     		ldr	r3, .L85
 1597 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1598 0046 13F0080F 		tst	r3, #8
 1599 004a 45D0     		beq	.L73
 1600              		.loc 1 1087 0 is_stmt 0 discriminator 1
 1601 004c 0122     		movs	r2, #1
 1602 004e 4FF48061 		mov	r1, #1024
 1603 0052 3448     		ldr	r0, .L85+4
 1604 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1605              	.LVL80:
 1606              	.L74:
1088:Src/main.c    ****   ((output_val>>4)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET) : HAL_GPIO_Writ
 1607              		.loc 1 1088 0 is_stmt 1
 1608 0058 314B     		ldr	r3, .L85
 1609 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1610 005c 13F0100F 		tst	r3, #16
 1611 0060 41D0     		beq	.L75
 1612              		.loc 1 1088 0 is_stmt 0 discriminator 1
 1613 0062 0122     		movs	r2, #1
 1614 0064 4FF40061 		mov	r1, #2048
 1615 0068 2E48     		ldr	r0, .L85+4
 1616 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1617              	.LVL81:
 1618              	.L76:
1089:Src/main.c    ****   ((output_val>>5)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET) : HAL_GPIO_Writ
 1619              		.loc 1 1089 0 is_stmt 1
 1620 006e 2C4B     		ldr	r3, .L85
 1621 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1622 0072 13F0200F 		tst	r3, #32
 1623 0076 3DD0     		beq	.L77
 1624              		.loc 1 1089 0 is_stmt 0 discriminator 1
 1625 0078 0122     		movs	r2, #1
 1626 007a 4FF48051 		mov	r1, #4096
 1627 007e 2948     		ldr	r0, .L85+4
 1628 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1629              	.LVL82:
 1630              	.L78:
1090:Src/main.c    ****   ((output_val>>6)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET) : HAL_GPIO_Writ
 1631              		.loc 1 1090 0 is_stmt 1
 1632 0084 264B     		ldr	r3, .L85
 1633 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1634 0088 13F0400F 		tst	r3, #64
 1635 008c 39D0     		beq	.L79
 1636              		.loc 1 1090 0 is_stmt 0 discriminator 1
 1637 008e 0122     		movs	r2, #1
 1638 0090 4FF40051 		mov	r1, #8192
 1639 0094 2348     		ldr	r0, .L85+4
 1640 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1641              	.LVL83:
 1642              	.L80:
ARM GAS  /tmp/ccn1DpdY.s 			page 50


1091:Src/main.c    ****   ((output_val>>7)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET) : HAL_GPIO_Writ
 1643              		.loc 1 1091 0 is_stmt 1
 1644 009a 214B     		ldr	r3, .L85
 1645 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1646 009e DB09     		lsrs	r3, r3, #7
 1647 00a0 36D1     		bne	.L84
 1648              		.loc 1 1091 0 is_stmt 0 discriminator 2
 1649 00a2 0022     		movs	r2, #0
 1650 00a4 4FF48041 		mov	r1, #16384
 1651 00a8 1E48     		ldr	r0, .L85+4
 1652 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 1653              	.LVL84:
 1654 00ae 08BD     		pop	{r3, pc}
 1655              	.L67:
1084:Src/main.c    ****   ((output_val>>1)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET) : HAL_GPIO_Write
 1656              		.loc 1 1084 0 is_stmt 1 discriminator 2
 1657 00b0 0022     		movs	r2, #0
 1658 00b2 8021     		movs	r1, #128
 1659 00b4 1B48     		ldr	r0, .L85+4
 1660 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1661              	.LVL85:
 1662 00ba ACE7     		b	.L68
 1663              	.L69:
1085:Src/main.c    ****   ((output_val>>2)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET) : HAL_GPIO_Write
 1664              		.loc 1 1085 0 discriminator 2
 1665 00bc 0022     		movs	r2, #0
 1666 00be 4FF48071 		mov	r1, #256
 1667 00c2 1848     		ldr	r0, .L85+4
 1668 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1669              	.LVL86:
 1670 00c8 B0E7     		b	.L70
 1671              	.L71:
1086:Src/main.c    ****   ((output_val>>3)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET) : HAL_GPIO_Writ
 1672              		.loc 1 1086 0 discriminator 2
 1673 00ca 0022     		movs	r2, #0
 1674 00cc 4FF40071 		mov	r1, #512
 1675 00d0 1448     		ldr	r0, .L85+4
 1676 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1677              	.LVL87:
 1678 00d6 B4E7     		b	.L72
 1679              	.L73:
1087:Src/main.c    ****   ((output_val>>4)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET) : HAL_GPIO_Writ
 1680              		.loc 1 1087 0 discriminator 2
 1681 00d8 0022     		movs	r2, #0
 1682 00da 4FF48061 		mov	r1, #1024
 1683 00de 1148     		ldr	r0, .L85+4
 1684 00e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1685              	.LVL88:
 1686 00e4 B8E7     		b	.L74
 1687              	.L75:
1088:Src/main.c    ****   ((output_val>>5)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET) : HAL_GPIO_Writ
 1688              		.loc 1 1088 0 discriminator 2
 1689 00e6 0022     		movs	r2, #0
 1690 00e8 4FF40061 		mov	r1, #2048
 1691 00ec 0D48     		ldr	r0, .L85+4
 1692 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 1693              	.LVL89:
ARM GAS  /tmp/ccn1DpdY.s 			page 51


 1694 00f2 BCE7     		b	.L76
 1695              	.L77:
1089:Src/main.c    ****   ((output_val>>6)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET) : HAL_GPIO_Writ
 1696              		.loc 1 1089 0 discriminator 2
 1697 00f4 0022     		movs	r2, #0
 1698 00f6 4FF48051 		mov	r1, #4096
 1699 00fa 0A48     		ldr	r0, .L85+4
 1700 00fc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1701              	.LVL90:
 1702 0100 C0E7     		b	.L78
 1703              	.L79:
1090:Src/main.c    ****   ((output_val>>7)&0x0001)==1 ? HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET) : HAL_GPIO_Writ
 1704              		.loc 1 1090 0 discriminator 2
 1705 0102 0022     		movs	r2, #0
 1706 0104 4FF40051 		mov	r1, #8192
 1707 0108 0648     		ldr	r0, .L85+4
 1708 010a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1709              	.LVL91:
 1710 010e C4E7     		b	.L80
 1711              	.L84:
 1712              		.loc 1 1091 0 discriminator 1
 1713 0110 0122     		movs	r2, #1
 1714 0112 4FF48041 		mov	r1, #16384
 1715 0116 0348     		ldr	r0, .L85+4
 1716 0118 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1717              	.LVL92:
 1718 011c 08BD     		pop	{r3, pc}
 1719              	.L86:
 1720 011e 00BF     		.align	2
 1721              	.L85:
 1722 0120 00000000 		.word	.LANCHOR1
 1723 0124 00100240 		.word	1073876992
 1724              		.cfi_endproc
 1725              	.LFE144:
 1727              		.section	.text.UART_PrintADSR,"ax",%progbits
 1728              		.align	1
 1729              		.global	UART_PrintADSR
 1730              		.syntax unified
 1731              		.thumb
 1732              		.thumb_func
 1733              		.fpu fpv4-sp-d16
 1735              	UART_PrintADSR:
 1736              	.LFB145:
1092:Src/main.c    **** }
1093:Src/main.c    **** 
1094:Src/main.c    **** void UART_PrintADSR(){
 1737              		.loc 1 1094 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 8
 1740              		@ frame_needed = 0, uses_anonymous_args = 0
 1741 0000 70B5     		push	{r4, r5, r6, lr}
 1742              	.LCFI25:
 1743              		.cfi_def_cfa_offset 16
 1744              		.cfi_offset 4, -16
 1745              		.cfi_offset 5, -12
 1746              		.cfi_offset 6, -8
 1747              		.cfi_offset 14, -4
ARM GAS  /tmp/ccn1DpdY.s 			page 52


 1748 0002 82B0     		sub	sp, sp, #8
 1749              	.LCFI26:
 1750              		.cfi_def_cfa_offset 24
1095:Src/main.c    ****   uint8_t uart_tx_buffer;
1096:Src/main.c    ****   uart_tx_buffer = attack;
 1751              		.loc 1 1096 0
 1752 0004 264B     		ldr	r3, .L89
 1753 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1754 0008 02AC     		add	r4, sp, #8
 1755 000a 04F8013D 		strb	r3, [r4, #-1]!
1097:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1756              		.loc 1 1097 0
 1757 000e 254D     		ldr	r5, .L89+4
 1758 0010 3223     		movs	r3, #50
 1759 0012 0122     		movs	r2, #1
 1760 0014 2146     		mov	r1, r4
 1761 0016 2846     		mov	r0, r5
 1762 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1763              	.LVL93:
1098:Src/main.c    ****   uart_tx_buffer = ' ';
 1764              		.loc 1 1098 0
 1765 001c 2026     		movs	r6, #32
 1766 001e 8DF80760 		strb	r6, [sp, #7]
1099:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1767              		.loc 1 1099 0
 1768 0022 3223     		movs	r3, #50
 1769 0024 0122     		movs	r2, #1
 1770 0026 2146     		mov	r1, r4
 1771 0028 2846     		mov	r0, r5
 1772 002a FFF7FEFF 		bl	HAL_UART_Transmit
 1773              	.LVL94:
1100:Src/main.c    ****   uart_tx_buffer = decay;
 1774              		.loc 1 1100 0
 1775 002e 1E4B     		ldr	r3, .L89+8
 1776 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1777 0032 8DF80730 		strb	r3, [sp, #7]
1101:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1778              		.loc 1 1101 0
 1779 0036 3223     		movs	r3, #50
 1780 0038 0122     		movs	r2, #1
 1781 003a 2146     		mov	r1, r4
 1782 003c 2846     		mov	r0, r5
 1783 003e FFF7FEFF 		bl	HAL_UART_Transmit
 1784              	.LVL95:
1102:Src/main.c    ****   uart_tx_buffer = ' ';
 1785              		.loc 1 1102 0
 1786 0042 8DF80760 		strb	r6, [sp, #7]
1103:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1787              		.loc 1 1103 0
 1788 0046 3223     		movs	r3, #50
 1789 0048 0122     		movs	r2, #1
 1790 004a 2146     		mov	r1, r4
 1791 004c 2846     		mov	r0, r5
 1792 004e FFF7FEFF 		bl	HAL_UART_Transmit
 1793              	.LVL96:
1104:Src/main.c    ****   uart_tx_buffer = sustain;
 1794              		.loc 1 1104 0
ARM GAS  /tmp/ccn1DpdY.s 			page 53


 1795 0052 164B     		ldr	r3, .L89+12
 1796 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1797 0056 8DF80730 		strb	r3, [sp, #7]
1105:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1798              		.loc 1 1105 0
 1799 005a 3223     		movs	r3, #50
 1800 005c 0122     		movs	r2, #1
 1801 005e 2146     		mov	r1, r4
 1802 0060 2846     		mov	r0, r5
 1803 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 1804              	.LVL97:
1106:Src/main.c    ****   uart_tx_buffer = ' ';
 1805              		.loc 1 1106 0
 1806 0066 8DF80760 		strb	r6, [sp, #7]
1107:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1807              		.loc 1 1107 0
 1808 006a 3223     		movs	r3, #50
 1809 006c 0122     		movs	r2, #1
 1810 006e 2146     		mov	r1, r4
 1811 0070 2846     		mov	r0, r5
 1812 0072 FFF7FEFF 		bl	HAL_UART_Transmit
 1813              	.LVL98:
1108:Src/main.c    ****   uart_tx_buffer = release;
 1814              		.loc 1 1108 0
 1815 0076 0E4B     		ldr	r3, .L89+16
 1816 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1817 007a 8DF80730 		strb	r3, [sp, #7]
1109:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1818              		.loc 1 1109 0
 1819 007e 3223     		movs	r3, #50
 1820 0080 0122     		movs	r2, #1
 1821 0082 2146     		mov	r1, r4
 1822 0084 2846     		mov	r0, r5
 1823 0086 FFF7FEFF 		bl	HAL_UART_Transmit
 1824              	.LVL99:
1110:Src/main.c    ****   uart_tx_buffer = '\n';
 1825              		.loc 1 1110 0
 1826 008a 0A23     		movs	r3, #10
 1827 008c 8DF80730 		strb	r3, [sp, #7]
1111:Src/main.c    ****   HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 1828              		.loc 1 1111 0
 1829 0090 3223     		movs	r3, #50
 1830 0092 0122     		movs	r2, #1
 1831 0094 2146     		mov	r1, r4
 1832 0096 2846     		mov	r0, r5
 1833 0098 FFF7FEFF 		bl	HAL_UART_Transmit
 1834              	.LVL100:
1112:Src/main.c    **** 
1113:Src/main.c    **** }
 1835              		.loc 1 1113 0
 1836 009c 02B0     		add	sp, sp, #8
 1837              	.LCFI27:
 1838              		.cfi_def_cfa_offset 16
 1839              		@ sp needed
 1840 009e 70BD     		pop	{r4, r5, r6, pc}
 1841              	.L90:
 1842              		.align	2
ARM GAS  /tmp/ccn1DpdY.s 			page 54


 1843              	.L89:
 1844 00a0 00000000 		.word	.LANCHOR9
 1845 00a4 00000000 		.word	huart1
 1846 00a8 00000000 		.word	.LANCHOR11
 1847 00ac 00000000 		.word	.LANCHOR10
 1848 00b0 00000000 		.word	.LANCHOR12
 1849              		.cfi_endproc
 1850              	.LFE145:
 1852              		.section	.text.enqueue,"ax",%progbits
 1853              		.align	1
 1854              		.global	enqueue
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	enqueue:
 1861              	.LFB146:
1114:Src/main.c    **** 
1115:Src/main.c    **** void enqueue (struct midi_msg midi_msg) {
 1862              		.loc 1 1115 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 8
 1865              		@ frame_needed = 0, uses_anonymous_args = 0
 1866              		@ link register save eliminated.
 1867 0000 82B0     		sub	sp, sp, #8
 1868              	.LCFI28:
 1869              		.cfi_def_cfa_offset 8
1116:Src/main.c    ****   midi_msg_queue.queue[midi_msg_queue.head++] = midi_msg;
 1870              		.loc 1 1116 0
 1871 0002 054B     		ldr	r3, .L93
 1872 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1873 0006 511C     		adds	r1, r2, #1
 1874 0008 1970     		strb	r1, [r3]
 1875 000a 03EB8203 		add	r3, r3, r2, lsl #2
 1876 000e C3F80200 		str	r0, [r3, #2]	@ unaligned
1117:Src/main.c    **** }
 1877              		.loc 1 1117 0
 1878 0012 02B0     		add	sp, sp, #8
 1879              	.LCFI29:
 1880              		.cfi_def_cfa_offset 0
 1881              		@ sp needed
 1882 0014 7047     		bx	lr
 1883              	.L94:
 1884 0016 00BF     		.align	2
 1885              	.L93:
 1886 0018 00000000 		.word	midi_msg_queue
 1887              		.cfi_endproc
 1888              	.LFE146:
 1890              		.section	.text.dequeue,"ax",%progbits
 1891              		.align	1
 1892              		.global	dequeue
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1896              		.fpu fpv4-sp-d16
 1898              	dequeue:
 1899              	.LFB147:
ARM GAS  /tmp/ccn1DpdY.s 			page 55


1118:Src/main.c    **** 
1119:Src/main.c    **** struct midi_msg dequeue(void) {
 1900              		.loc 1 1119 0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 8
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 1904              		@ link register save eliminated.
 1905 0000 82B0     		sub	sp, sp, #8
 1906              	.LCFI30:
 1907              		.cfi_def_cfa_offset 8
1120:Src/main.c    ****   return midi_msg_queue.queue[midi_msg_queue.tail++];
 1908              		.loc 1 1120 0
 1909 0002 0D4B     		ldr	r3, .L97
 1910 0004 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1911 0006 511C     		adds	r1, r2, #1
 1912 0008 5970     		strb	r1, [r3, #1]
 1913 000a 03EB8203 		add	r3, r3, r2, lsl #2
 1914 000e D3F80200 		ldr	r0, [r3, #2]	@ unaligned
 1915 0012 0023     		movs	r3, #0
 1916 0014 C2B2     		uxtb	r2, r0
 1917 0016 62F30703 		bfi	r3, r2, #0, #8
 1918 001a C0F30722 		ubfx	r2, r0, #8, #8
 1919 001e 62F30F23 		bfi	r3, r2, #8, #8
 1920 0022 C0F30742 		ubfx	r2, r0, #16, #8
 1921 0026 62F31743 		bfi	r3, r2, #16, #8
 1922 002a 000E     		lsrs	r0, r0, #24
 1923 002c 60F31F63 		bfi	r3, r0, #24, #8
1121:Src/main.c    **** }
 1924              		.loc 1 1121 0
 1925 0030 1846     		mov	r0, r3
 1926 0032 02B0     		add	sp, sp, #8
 1927              	.LCFI31:
 1928              		.cfi_def_cfa_offset 0
 1929              		@ sp needed
 1930 0034 7047     		bx	lr
 1931              	.L98:
 1932 0036 00BF     		.align	2
 1933              	.L97:
 1934 0038 00000000 		.word	midi_msg_queue
 1935              		.cfi_endproc
 1936              	.LFE147:
 1938              		.section	.text.enqueue_byte,"ax",%progbits
 1939              		.align	1
 1940              		.global	enqueue_byte
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1944              		.fpu fpv4-sp-d16
 1946              	enqueue_byte:
 1947              	.LFB148:
1122:Src/main.c    **** 
1123:Src/main.c    **** void enqueue_byte (uint8_t byte) {
 1948              		.loc 1 1123 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
ARM GAS  /tmp/ccn1DpdY.s 			page 56


 1953              	.LVL101:
1124:Src/main.c    ****   byte_queue.queue[byte_queue.head++] = byte;
 1954              		.loc 1 1124 0
 1955 0000 034B     		ldr	r3, .L100
 1956 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1957 0004 511C     		adds	r1, r2, #1
 1958 0006 1970     		strb	r1, [r3]
 1959 0008 1344     		add	r3, r3, r2
 1960 000a 9870     		strb	r0, [r3, #2]
 1961 000c 7047     		bx	lr
 1962              	.L101:
 1963 000e 00BF     		.align	2
 1964              	.L100:
 1965 0010 00000000 		.word	byte_queue
 1966              		.cfi_endproc
 1967              	.LFE148:
 1969              		.section	.text.HAL_SPI_TxRxCpltCallback,"ax",%progbits
 1970              		.align	1
 1971              		.global	HAL_SPI_TxRxCpltCallback
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1975              		.fpu fpv4-sp-d16
 1977              	HAL_SPI_TxRxCpltCallback:
 1978              	.LFB139:
 867:Src/main.c    ****   //  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 1979              		.loc 1 867 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 8
 1982              		@ frame_needed = 0, uses_anonymous_args = 0
 1983              	.LVL102:
 1984 0000 30B5     		push	{r4, r5, lr}
 1985              	.LCFI32:
 1986              		.cfi_def_cfa_offset 12
 1987              		.cfi_offset 4, -12
 1988              		.cfi_offset 5, -8
 1989              		.cfi_offset 14, -4
 1990 0002 83B0     		sub	sp, sp, #12
 1991              	.LCFI33:
 1992              		.cfi_def_cfa_offset 24
 881:Src/main.c    ****     uart_tx_buffer = 'n';
 1993              		.loc 1 881 0
 1994 0004 1C4B     		ldr	r3, .L108
 1995 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1996 0008 902B     		cmp	r3, #144
 1997 000a 0AD0     		beq	.L106
 887:Src/main.c    ****     uart_tx_buffer = 'f';
 1998              		.loc 1 887 0
 1999 000c 802B     		cmp	r3, #128
 2000 000e 1DD0     		beq	.L107
 2001              	.LVL103:
 2002              	.L104:
 918:Src/main.c    ****   enqueue_byte(spi_rx_buffer[0]);
 2003              		.loc 1 918 0
 2004 0010 0122     		movs	r2, #1
 2005 0012 1A4B     		ldr	r3, .L108+4
 2006 0014 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccn1DpdY.s 			page 57


 919:Src/main.c    **** 
 2007              		.loc 1 919 0
 2008 0016 184B     		ldr	r3, .L108
 2009 0018 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2010 001a FFF7FEFF 		bl	enqueue_byte
 2011              	.LVL104:
 983:Src/main.c    **** 
 2012              		.loc 1 983 0
 2013 001e 03B0     		add	sp, sp, #12
 2014              	.LCFI34:
 2015              		.cfi_remember_state
 2016              		.cfi_def_cfa_offset 12
 2017              		@ sp needed
 2018 0020 30BD     		pop	{r4, r5, pc}
 2019              	.LVL105:
 2020              	.L106:
 2021              	.LCFI35:
 2022              		.cfi_restore_state
 882:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 2023              		.loc 1 882 0
 2024 0022 02AC     		add	r4, sp, #8
 2025 0024 6E23     		movs	r3, #110
 2026 0026 04F8013D 		strb	r3, [r4, #-1]!
 883:Src/main.c    ****     uart_tx_buffer = '\n';
 2027              		.loc 1 883 0
 2028 002a 154D     		ldr	r5, .L108+8
 2029 002c 3223     		movs	r3, #50
 2030 002e 0122     		movs	r2, #1
 2031 0030 2146     		mov	r1, r4
 2032 0032 2846     		mov	r0, r5
 2033              	.LVL106:
 2034 0034 FFF7FEFF 		bl	HAL_UART_Transmit
 2035              	.LVL107:
 884:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 2036              		.loc 1 884 0
 2037 0038 0A23     		movs	r3, #10
 2038 003a 8DF80730 		strb	r3, [sp, #7]
 885:Src/main.c    ****   }
 2039              		.loc 1 885 0
 2040 003e 3223     		movs	r3, #50
 2041 0040 0122     		movs	r2, #1
 2042 0042 2146     		mov	r1, r4
 2043 0044 2846     		mov	r0, r5
 2044 0046 FFF7FEFF 		bl	HAL_UART_Transmit
 2045              	.LVL108:
 2046 004a E1E7     		b	.L104
 2047              	.LVL109:
 2048              	.L107:
 888:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 2049              		.loc 1 888 0
 2050 004c 02AC     		add	r4, sp, #8
 2051 004e 6623     		movs	r3, #102
 2052 0050 04F8013D 		strb	r3, [r4, #-1]!
 889:Src/main.c    ****     uart_tx_buffer = '\n';
 2053              		.loc 1 889 0
 2054 0054 0A4D     		ldr	r5, .L108+8
 2055 0056 3223     		movs	r3, #50
ARM GAS  /tmp/ccn1DpdY.s 			page 58


 2056 0058 0122     		movs	r2, #1
 2057 005a 2146     		mov	r1, r4
 2058 005c 2846     		mov	r0, r5
 2059              	.LVL110:
 2060 005e FFF7FEFF 		bl	HAL_UART_Transmit
 2061              	.LVL111:
 890:Src/main.c    ****     HAL_UART_Transmit(&huart1, &uart_tx_buffer, 1, 50);
 2062              		.loc 1 890 0
 2063 0062 0A23     		movs	r3, #10
 2064 0064 8DF80730 		strb	r3, [sp, #7]
 891:Src/main.c    ****   }
 2065              		.loc 1 891 0
 2066 0068 3223     		movs	r3, #50
 2067 006a 0122     		movs	r2, #1
 2068 006c 2146     		mov	r1, r4
 2069 006e 2846     		mov	r0, r5
 2070 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 2071              	.LVL112:
 2072 0074 CCE7     		b	.L104
 2073              	.L109:
 2074 0076 00BF     		.align	2
 2075              	.L108:
 2076 0078 00000000 		.word	spi_rx_buffer
 2077 007c 00000000 		.word	.LANCHOR14
 2078 0080 00000000 		.word	huart1
 2079              		.cfi_endproc
 2080              	.LFE139:
 2082              		.section	.text.dequeue_byte,"ax",%progbits
 2083              		.align	1
 2084              		.global	dequeue_byte
 2085              		.syntax unified
 2086              		.thumb
 2087              		.thumb_func
 2088              		.fpu fpv4-sp-d16
 2090              	dequeue_byte:
 2091              	.LFB149:
1125:Src/main.c    **** }
1126:Src/main.c    **** 
1127:Src/main.c    **** uint8_t dequeue_byte(void) {
 2092              		.loc 1 1127 0
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 0
 2095              		@ frame_needed = 0, uses_anonymous_args = 0
 2096              		@ link register save eliminated.
1128:Src/main.c    ****   return byte_queue.queue[byte_queue.tail++];
 2097              		.loc 1 1128 0
 2098 0000 034B     		ldr	r3, .L111
 2099 0002 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2100 0004 511C     		adds	r1, r2, #1
 2101 0006 5970     		strb	r1, [r3, #1]
 2102 0008 1344     		add	r3, r3, r2
1129:Src/main.c    **** }
 2103              		.loc 1 1129 0
 2104 000a 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 2105 000c 7047     		bx	lr
 2106              	.L112:
 2107 000e 00BF     		.align	2
ARM GAS  /tmp/ccn1DpdY.s 			page 59


 2108              	.L111:
 2109 0010 00000000 		.word	byte_queue
 2110              		.cfi_endproc
 2111              	.LFE149:
 2113              		.section	.text.main,"ax",%progbits
 2114              		.align	1
 2115              		.global	main
 2116              		.syntax unified
 2117              		.thumb
 2118              		.thumb_func
 2119              		.fpu fpv4-sp-d16
 2121              	main:
 2122              	.LFB130:
 142:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2123              		.loc 1 142 0
 2124              		.cfi_startproc
 2125              		@ args = 0, pretend = 0, frame = 24
 2126              		@ frame_needed = 0, uses_anonymous_args = 0
 2127 0000 30B5     		push	{r4, r5, lr}
 2128              	.LCFI36:
 2129              		.cfi_def_cfa_offset 12
 2130              		.cfi_offset 4, -12
 2131              		.cfi_offset 5, -8
 2132              		.cfi_offset 14, -4
 2133 0002 87B0     		sub	sp, sp, #28
 2134              	.LCFI37:
 2135              		.cfi_def_cfa_offset 40
 150:Src/main.c    **** 
 2136              		.loc 1 150 0
 2137 0004 FFF7FEFF 		bl	HAL_Init
 2138              	.LVL113:
 157:Src/main.c    **** 
 2139              		.loc 1 157 0
 2140 0008 FFF7FEFF 		bl	SystemClock_Config
 2141              	.LVL114:
 164:Src/main.c    ****   MX_SPI5_Init();
 2142              		.loc 1 164 0
 2143 000c FFF7FEFF 		bl	MX_GPIO_Init
 2144              	.LVL115:
 165:Src/main.c    ****   MX_USART1_UART_Init();
 2145              		.loc 1 165 0
 2146 0010 FFF7FEFF 		bl	MX_SPI5_Init
 2147              	.LVL116:
 166:Src/main.c    ****   MX_DAC_Init();
 2148              		.loc 1 166 0
 2149 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 2150              	.LVL117:
 167:Src/main.c    ****   MX_TIM6_Init();
 2151              		.loc 1 167 0
 2152 0018 FFF7FEFF 		bl	MX_DAC_Init
 2153              	.LVL118:
 168:Src/main.c    ****   MX_TIM7_Init();
 2154              		.loc 1 168 0
 2155 001c FFF7FEFF 		bl	MX_TIM6_Init
 2156              	.LVL119:
 169:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2157              		.loc 1 169 0
ARM GAS  /tmp/ccn1DpdY.s 			page 60


 2158 0020 FFF7FEFF 		bl	MX_TIM7_Init
 2159              	.LVL120:
 171:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim6);
 2160              		.loc 1 171 0
 2161 0024 FFF7FEFF 		bl	init_wavetable
 2162              	.LVL121:
 172:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim7);
 2163              		.loc 1 172 0
 2164 0028 B448     		ldr	r0, .L161
 2165 002a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2166              	.LVL122:
 173:Src/main.c    ****   HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 2167              		.loc 1 173 0
 2168 002e B448     		ldr	r0, .L161+4
 2169 0030 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2170              	.LVL123:
 174:Src/main.c    **** 
 2171              		.loc 1 174 0
 2172 0034 1021     		movs	r1, #16
 2173 0036 B348     		ldr	r0, .L161+8
 2174 0038 FFF7FEFF 		bl	HAL_DAC_Start
 2175              	.LVL124:
 2176              	.LBB15:
 176:Src/main.c    ****     env_state[i] = NOT_TRIGGERED;
 2177              		.loc 1 176 0
 2178 003c 0023     		movs	r3, #0
 2179 003e 0CE0     		b	.L114
 2180              	.LVL125:
 2181              	.L115:
 177:Src/main.c    ****     note_on[i] = MIDI_NOTE_OFF;
 2182              		.loc 1 177 0 discriminator 3
 2183 0040 0022     		movs	r2, #0
 2184 0042 B149     		ldr	r1, .L161+12
 2185 0044 CA54     		strb	r2, [r1, r3]
 178:Src/main.c    ****     note_freq[i] = 0;
 2186              		.loc 1 178 0 discriminator 3
 2187 0046 8020     		movs	r0, #128
 2188 0048 B049     		ldr	r1, .L161+16
 2189 004a C854     		strb	r0, [r1, r3]
 179:Src/main.c    ****     lfo_freq[i] = 20;
 2190              		.loc 1 179 0 discriminator 3
 2191 004c B049     		ldr	r1, .L161+20
 2192 004e CA54     		strb	r2, [r1, r3]
 180:Src/main.c    ****   }
 2193              		.loc 1 180 0 discriminator 3
 2194 0050 1421     		movs	r1, #20
 2195 0052 B04A     		ldr	r2, .L161+24
 2196 0054 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 176:Src/main.c    ****     env_state[i] = NOT_TRIGGERED;
 2197              		.loc 1 176 0 discriminator 3
 2198 0058 0133     		adds	r3, r3, #1
 2199              	.LVL126:
 2200              	.L114:
 176:Src/main.c    ****     env_state[i] = NOT_TRIGGERED;
 2201              		.loc 1 176 0 is_stmt 0 discriminator 1
 2202 005a 0F2B     		cmp	r3, #15
 2203 005c F0DD     		ble	.L115
ARM GAS  /tmp/ccn1DpdY.s 			page 61


 2204              	.LBE15:
 202:Src/main.c    ****   HAL_UART_Transmit(&huart1, init_msg, 20, 50);
 2205              		.loc 1 202 0 is_stmt 1
 2206 005e AE4B     		ldr	r3, .L161+28
 2207              	.LVL127:
 2208 0060 01AC     		add	r4, sp, #4
 2209 0062 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2210 0064 07C4     		stmia	r4!, {r0, r1, r2}
 2211 0066 2370     		strb	r3, [r4]
 2212 0068 0024     		movs	r4, #0
 2213 006a CDF81140 		str	r4, [sp, #17]	@ unaligned
 2214 006e 0594     		str	r4, [sp, #20]	@ unaligned
 203:Src/main.c    **** 
 2215              		.loc 1 203 0
 2216 0070 3223     		movs	r3, #50
 2217 0072 1422     		movs	r2, #20
 2218 0074 01A9     		add	r1, sp, #4
 2219 0076 A948     		ldr	r0, .L161+32
 2220 0078 FFF7FEFF 		bl	HAL_UART_Transmit
 2221              	.LVL128:
 2222 007c DFE0     		b	.L116
 2223              	.LVL129:
 2224              	.L154:
 2225              	.LBB16:
 225:Src/main.c    ****         case MIDI_NOTE_ON:
 2226              		.loc 1 225 0
 2227 007e 1428     		cmp	r0, #20
 2228 0080 22D0     		beq	.L122
 2229 0082 1528     		cmp	r0, #21
 2230 0084 40F00781 		bne	.L119
 236:Src/main.c    ****           break;
 2231              		.loc 1 236 0
 2232 0088 0122     		movs	r2, #1
 2233 008a A54B     		ldr	r3, .L161+36
 2234 008c 1A70     		strb	r2, [r3]
 237:Src/main.c    ****         case SUSTAIN_CC:
 2235              		.loc 1 237 0
 2236 008e 02E0     		b	.L118
 2237              	.L125:
 227:Src/main.c    ****           break;
 2238              		.loc 1 227 0
 2239 0090 0122     		movs	r2, #1
 2240 0092 A44B     		ldr	r3, .L161+40
 2241 0094 1A70     		strb	r2, [r3]
 2242              	.LVL130:
 2243              	.L118:
 2244              	.LBE16:
 320:Src/main.c    ****       process_msg_flag = 0;
 2245              		.loc 1 320 0
 2246 0096 002C     		cmp	r4, #0
 2247 0098 00F0BE80 		beq	.L132
 2248              	.LVL131:
 322:Src/main.c    ****       case MIDI_NOTE_ON:
 2249              		.loc 1 322 0
 2250 009c A24B     		ldr	r3, .L161+44
 2251 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2252 00a0 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccn1DpdY.s 			page 62


 2253 00a2 162B     		cmp	r3, #22
 2254 00a4 00F06081 		beq	.L133
 2255 00a8 7BD9     		bls	.L149
 2256 00aa 802B     		cmp	r3, #128
 2257 00ac 00F0B180 		beq	.L146
 2258 00b0 902B     		cmp	r3, #144
 2259 00b2 00F08E80 		beq	.L147
 2260 00b6 172B     		cmp	r3, #23
 2261 00b8 00F05C81 		beq	.L150
 2262              	.L145:
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2263              		.loc 1 321 0
 2264 00bc 0024     		movs	r4, #0
 2265 00be ABE0     		b	.L132
 2266              	.LVL132:
 2267              	.L124:
 2268              	.LBB23:
 230:Src/main.c    ****           break;
 2269              		.loc 1 230 0
 2270 00c0 0122     		movs	r2, #1
 2271 00c2 9A4B     		ldr	r3, .L161+48
 2272 00c4 1A70     		strb	r2, [r3]
 231:Src/main.c    ****         case ATTACK_CC:
 2273              		.loc 1 231 0
 2274 00c6 E6E7     		b	.L118
 2275              	.L122:
 233:Src/main.c    ****           break;
 2276              		.loc 1 233 0
 2277 00c8 0122     		movs	r2, #1
 2278 00ca 994B     		ldr	r3, .L161+52
 2279 00cc 1A70     		strb	r2, [r3]
 234:Src/main.c    ****         case DECAY_CC:
 2280              		.loc 1 234 0
 2281 00ce E2E7     		b	.L118
 2282              	.L120:
 239:Src/main.c    ****           break;
 2283              		.loc 1 239 0
 2284 00d0 0122     		movs	r2, #1
 2285 00d2 984B     		ldr	r3, .L161+56
 2286 00d4 1A70     		strb	r2, [r3]
 240:Src/main.c    ****         case RELEASE_CC:
 2287              		.loc 1 240 0
 2288 00d6 DEE7     		b	.L118
 2289              	.L155:
 242:Src/main.c    ****           break;
 2290              		.loc 1 242 0
 2291 00d8 0122     		movs	r2, #1
 2292 00da 974B     		ldr	r3, .L161+60
 2293 00dc 1A70     		strb	r2, [r3]
 243:Src/main.c    ****         default:
 2294              		.loc 1 243 0
 2295 00de DAE7     		b	.L118
 2296              	.L156:
 2297              	.LBB17:
 246:Src/main.c    ****           MIDI_NOTE_ON,
 2298              		.loc 1 246 0
 2299 00e0 9023     		movs	r3, #144
ARM GAS  /tmp/ccn1DpdY.s 			page 63


 2300 00e2 8DF80030 		strb	r3, [sp]
 248:Src/main.c    ****           127,
 2301              		.loc 1 248 0
 2302 00e6 954B     		ldr	r3, .L161+64
 2303 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 246:Src/main.c    ****           MIDI_NOTE_ON,
 2304              		.loc 1 246 0
 2305 00ea 8DF80130 		strb	r3, [sp, #1]
 2306 00ee 7F23     		movs	r3, #127
 2307 00f0 8DF80230 		strb	r3, [sp, #2]
 2308 00f4 0025     		movs	r5, #0
 2309 00f6 8DF80350 		strb	r5, [sp, #3]
 252:Src/main.c    ****         note_on_flag = 0;
 2310              		.loc 1 252 0
 2311 00fa 0098     		ldr	r0, [sp]
 2312              	.LVL133:
 2313 00fc FFF7FEFF 		bl	enqueue
 2314              	.LVL134:
 253:Src/main.c    ****       }
 2315              		.loc 1 253 0
 2316 0100 884B     		ldr	r3, .L161+40
 2317 0102 1D70     		strb	r5, [r3]
 2318              	.LBE17:
 2319 0104 C7E7     		b	.L118
 2320              	.LVL135:
 2321              	.L157:
 2322              	.LBB18:
 256:Src/main.c    ****           MIDI_NOTE_OFF,
 2323              		.loc 1 256 0 discriminator 2
 2324 0106 8023     		movs	r3, #128
 2325 0108 8DF80030 		strb	r3, [sp]
 258:Src/main.c    ****           0,
 2326              		.loc 1 258 0 discriminator 2
 2327 010c 8B4B     		ldr	r3, .L161+64
 2328 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 256:Src/main.c    ****           MIDI_NOTE_OFF,
 2329              		.loc 1 256 0 discriminator 2
 2330 0110 8DF80130 		strb	r3, [sp, #1]
 2331 0114 0025     		movs	r5, #0
 2332 0116 8DF80250 		strb	r5, [sp, #2]
 2333 011a 8DF80350 		strb	r5, [sp, #3]
 262:Src/main.c    ****         note_off_flag = 0;
 2334              		.loc 1 262 0 discriminator 2
 2335 011e 0098     		ldr	r0, [sp]
 2336              	.LVL136:
 2337 0120 FFF7FEFF 		bl	enqueue
 2338              	.LVL137:
 263:Src/main.c    ****       }
 2339              		.loc 1 263 0 discriminator 2
 2340 0124 814B     		ldr	r3, .L161+48
 2341 0126 1D70     		strb	r5, [r3]
 2342              	.LBE18:
 2343 0128 B5E7     		b	.L118
 2344              	.LVL138:
 2345              	.L158:
 2346              	.LBB19:
 266:Src/main.c    ****           ATTACK_CC,
ARM GAS  /tmp/ccn1DpdY.s 			page 64


 2347              		.loc 1 266 0 discriminator 3
 2348 012a 1423     		movs	r3, #20
 2349 012c 8DF80030 		strb	r3, [sp]
 268:Src/main.c    ****           0,
 2350              		.loc 1 268 0 discriminator 3
 2351 0130 824B     		ldr	r3, .L161+64
 2352 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 266:Src/main.c    ****           ATTACK_CC,
 2353              		.loc 1 266 0 discriminator 3
 2354 0134 8DF80130 		strb	r3, [sp, #1]
 2355 0138 0025     		movs	r5, #0
 2356 013a 8DF80250 		strb	r5, [sp, #2]
 2357 013e 8DF80350 		strb	r5, [sp, #3]
 272:Src/main.c    ****         attack_cc_flag = 0;
 2358              		.loc 1 272 0 discriminator 3
 2359 0142 0098     		ldr	r0, [sp]
 2360              	.LVL139:
 2361 0144 FFF7FEFF 		bl	enqueue
 2362              	.LVL140:
 273:Src/main.c    ****         UART_PrintADSR();
 2363              		.loc 1 273 0 discriminator 3
 2364 0148 794B     		ldr	r3, .L161+52
 2365 014a 1D70     		strb	r5, [r3]
 274:Src/main.c    ****       }
 2366              		.loc 1 274 0 discriminator 3
 2367 014c FFF7FEFF 		bl	UART_PrintADSR
 2368              	.LVL141:
 2369              	.LBE19:
 2370 0150 A1E7     		b	.L118
 2371              	.LVL142:
 2372              	.L159:
 2373              	.LBB20:
 277:Src/main.c    ****           DECAY_CC,
 2374              		.loc 1 277 0 discriminator 4
 2375 0152 1523     		movs	r3, #21
 2376 0154 8DF80030 		strb	r3, [sp]
 279:Src/main.c    ****           0,
 2377              		.loc 1 279 0 discriminator 4
 2378 0158 784B     		ldr	r3, .L161+64
 2379 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277:Src/main.c    ****           DECAY_CC,
 2380              		.loc 1 277 0 discriminator 4
 2381 015c 8DF80130 		strb	r3, [sp, #1]
 2382 0160 0025     		movs	r5, #0
 2383 0162 8DF80250 		strb	r5, [sp, #2]
 2384 0166 8DF80350 		strb	r5, [sp, #3]
 283:Src/main.c    ****         decay_cc_flag = 0;
 2385              		.loc 1 283 0 discriminator 4
 2386 016a 0098     		ldr	r0, [sp]
 2387              	.LVL143:
 2388 016c FFF7FEFF 		bl	enqueue
 2389              	.LVL144:
 284:Src/main.c    ****         UART_PrintADSR();
 2390              		.loc 1 284 0 discriminator 4
 2391 0170 6B4B     		ldr	r3, .L161+36
 2392 0172 1D70     		strb	r5, [r3]
 285:Src/main.c    ****       }
ARM GAS  /tmp/ccn1DpdY.s 			page 65


 2393              		.loc 1 285 0 discriminator 4
 2394 0174 FFF7FEFF 		bl	UART_PrintADSR
 2395              	.LVL145:
 2396              	.LBE20:
 2397 0178 8DE7     		b	.L118
 2398              	.LVL146:
 2399              	.L160:
 2400              	.LBB21:
 288:Src/main.c    ****           SUSTAIN_CC,
 2401              		.loc 1 288 0 discriminator 5
 2402 017a 1623     		movs	r3, #22
 2403 017c 8DF80030 		strb	r3, [sp]
 290:Src/main.c    ****           0,
 2404              		.loc 1 290 0 discriminator 5
 2405 0180 6E4B     		ldr	r3, .L161+64
 2406 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288:Src/main.c    ****           SUSTAIN_CC,
 2407              		.loc 1 288 0 discriminator 5
 2408 0184 8DF80130 		strb	r3, [sp, #1]
 2409 0188 0025     		movs	r5, #0
 2410 018a 8DF80250 		strb	r5, [sp, #2]
 2411 018e 8DF80350 		strb	r5, [sp, #3]
 294:Src/main.c    ****         sustain_cc_flag = 0;
 2412              		.loc 1 294 0 discriminator 5
 2413 0192 0098     		ldr	r0, [sp]
 2414              	.LVL147:
 2415 0194 FFF7FEFF 		bl	enqueue
 2416              	.LVL148:
 295:Src/main.c    ****         UART_PrintADSR();
 2417              		.loc 1 295 0 discriminator 5
 2418 0198 664B     		ldr	r3, .L161+56
 2419 019a 1D70     		strb	r5, [r3]
 296:Src/main.c    ****       }
 2420              		.loc 1 296 0 discriminator 5
 2421 019c FFF7FEFF 		bl	UART_PrintADSR
 2422              	.LVL149:
 2423              	.LBE21:
 2424 01a0 79E7     		b	.L118
 2425              	.LVL150:
 2426              	.L149:
 2427              	.LBE23:
 322:Src/main.c    ****       case MIDI_NOTE_ON:
 2428              		.loc 1 322 0
 2429 01a2 142B     		cmp	r3, #20
 2430 01a4 00F0DA80 		beq	.L135
 2431 01a8 152B     		cmp	r3, #21
 2432 01aa 87D1     		bne	.L145
 345:Src/main.c    ****         break;
 2433              		.loc 1 345 0
 2434 01ac 5E4B     		ldr	r3, .L161+44
 2435 01ae 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2436 01b0 634B     		ldr	r3, .L161+68
 2437 01b2 1A70     		strb	r2, [r3]
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2438              		.loc 1 321 0
 2439 01b4 0024     		movs	r4, #0
 346:Src/main.c    ****       case SUSTAIN_CC:
ARM GAS  /tmp/ccn1DpdY.s 			page 66


 2440              		.loc 1 346 0
 2441 01b6 2FE0     		b	.L132
 2442              	.LVL151:
 2443              	.L152:
 2444              	.LBB24:
 326:Src/main.c    ****             note_freq[i] = current_midi_msg.byte1;
 2445              		.loc 1 326 0
 2446 01b8 9021     		movs	r1, #144
 2447 01ba 544A     		ldr	r2, .L161+16
 2448 01bc D154     		strb	r1, [r2, r3]
 327:Src/main.c    ****             env_state[i] = ATTACK_MODE;
 2449              		.loc 1 327 0
 2450 01be 5A4A     		ldr	r2, .L161+44
 2451 01c0 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2452 01c2 D2B2     		uxtb	r2, r2
 2453 01c4 5249     		ldr	r1, .L161+20
 2454 01c6 CA54     		strb	r2, [r1, r3]
 328:Src/main.c    ****             break;
 2455              		.loc 1 328 0
 2456 01c8 0121     		movs	r1, #1
 2457 01ca 4F4A     		ldr	r2, .L161+12
 2458 01cc D154     		strb	r1, [r2, r3]
 2459              	.LBE24:
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2460              		.loc 1 321 0
 2461 01ce 0024     		movs	r4, #0
 2462              	.LBB25:
 329:Src/main.c    ****           }
 2463              		.loc 1 329 0
 2464 01d0 22E0     		b	.L132
 2465              	.LVL152:
 2466              	.L147:
 2467              	.LBE25:
 322:Src/main.c    ****       case MIDI_NOTE_ON:
 2468              		.loc 1 322 0
 2469 01d2 0023     		movs	r3, #0
 2470              	.L138:
 2471              	.LVL153:
 2472              	.LBB26:
 324:Src/main.c    ****           if(note_on[i] == MIDI_NOTE_OFF){
 2473              		.loc 1 324 0 discriminator 1
 2474 01d4 0F2B     		cmp	r3, #15
 2475 01d6 06DC     		bgt	.L151
 325:Src/main.c    ****             note_on[i] = MIDI_NOTE_ON;
 2476              		.loc 1 325 0
 2477 01d8 4C4A     		ldr	r2, .L161+16
 2478 01da D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2479 01dc D2B2     		uxtb	r2, r2
 2480 01de 802A     		cmp	r2, #128
 2481 01e0 EAD0     		beq	.L152
 324:Src/main.c    ****           if(note_on[i] == MIDI_NOTE_OFF){
 2482              		.loc 1 324 0 discriminator 2
 2483 01e2 0133     		adds	r3, r3, #1
 2484              	.LVL154:
 2485 01e4 F6E7     		b	.L138
 2486              	.L151:
 2487              	.LBE26:
ARM GAS  /tmp/ccn1DpdY.s 			page 67


 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2488              		.loc 1 321 0
 2489 01e6 0024     		movs	r4, #0
 2490 01e8 16E0     		b	.L132
 2491              	.LVL155:
 2492              	.L142:
 2493              	.LBB27:
 334:Src/main.c    ****           if (note_on[i] == MIDI_NOTE_ON && note_freq[i] == current_midi_msg.byte1){
 2494              		.loc 1 334 0 discriminator 2
 2495 01ea 0133     		adds	r3, r3, #1
 2496              	.LVL156:
 2497              	.L137:
 334:Src/main.c    ****           if (note_on[i] == MIDI_NOTE_ON && note_freq[i] == current_midi_msg.byte1){
 2498              		.loc 1 334 0 is_stmt 0 discriminator 1
 2499 01ec 0F2B     		cmp	r3, #15
 2500 01ee 12DC     		bgt	.L153
 335:Src/main.c    ****             //note_on[i] = MIDI_NOTE_OFF;
 2501              		.loc 1 335 0 is_stmt 1
 2502 01f0 464A     		ldr	r2, .L161+16
 2503 01f2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2504 01f4 D2B2     		uxtb	r2, r2
 2505 01f6 902A     		cmp	r2, #144
 2506 01f8 F7D1     		bne	.L142
 335:Src/main.c    ****             //note_on[i] = MIDI_NOTE_OFF;
 2507              		.loc 1 335 0 is_stmt 0 discriminator 1
 2508 01fa 454A     		ldr	r2, .L161+20
 2509 01fc D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2510 01fe C9B2     		uxtb	r1, r1
 2511 0200 494A     		ldr	r2, .L161+44
 2512 0202 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2513 0204 D2B2     		uxtb	r2, r2
 2514 0206 9142     		cmp	r1, r2
 2515 0208 EFD1     		bne	.L142
 337:Src/main.c    ****           }
 2516              		.loc 1 337 0 is_stmt 1
 2517 020a 0421     		movs	r1, #4
 2518 020c 3E4A     		ldr	r2, .L161+12
 2519 020e D154     		strb	r1, [r2, r3]
 2520 0210 EBE7     		b	.L142
 2521              	.LVL157:
 2522              	.L146:
 2523              	.LBE27:
 322:Src/main.c    ****       case MIDI_NOTE_ON:
 2524              		.loc 1 322 0
 2525 0212 0023     		movs	r3, #0
 2526 0214 EAE7     		b	.L137
 2527              	.LVL158:
 2528              	.L153:
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2529              		.loc 1 321 0
 2530 0216 0024     		movs	r4, #0
 2531              	.LVL159:
 2532              	.L132:
 357:Src/main.c    ****       //      __disable_irq();
 2533              		.loc 1 357 0
 2534 0218 4A4B     		ldr	r3, .L161+72
 2535 021a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccn1DpdY.s 			page 68


 2536 021c 7BB1     		cbz	r3, .L116
 359:Src/main.c    ****       UpdateLFOs();
 2537              		.loc 1 359 0
 2538 021e FFF7FEFF 		bl	UpdateEnvelope
 2539              	.LVL160:
 360:Src/main.c    ****       UpdateOutputValue();
 2540              		.loc 1 360 0
 2541 0222 FFF7FEFF 		bl	UpdateLFOs
 2542              	.LVL161:
 361:Src/main.c    ****       HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, output_val);
 2543              		.loc 1 361 0
 2544 0226 FFF7FEFF 		bl	UpdateOutputValue
 2545              	.LVL162:
 362:Src/main.c    ****       update_value_flag = 0;
 2546              		.loc 1 362 0
 2547 022a 474B     		ldr	r3, .L161+76
 2548 022c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2549 022e 0822     		movs	r2, #8
 2550 0230 1021     		movs	r1, #16
 2551 0232 3448     		ldr	r0, .L161+8
 2552 0234 FFF7FEFF 		bl	HAL_DAC_SetValue
 2553              	.LVL163:
 363:Src/main.c    ****       //      __enable_irq();
 2554              		.loc 1 363 0
 2555 0238 0022     		movs	r2, #0
 2556 023a 424B     		ldr	r3, .L161+72
 2557 023c 1A70     		strb	r2, [r3]
 2558              	.LVL164:
 2559              	.L116:
 212:Src/main.c    **** 
 2560              		.loc 1 212 0
 2561 023e 3F49     		ldr	r1, .L161+64
 2562 0240 4248     		ldr	r0, .L161+80
 2563 0242 FFF7FEFF 		bl	Receive_MIDI
 2564              	.LVL165:
 214:Src/main.c    ****       current_midi_msg = dequeue();
 2565              		.loc 1 214 0
 2566 0246 424B     		ldr	r3, .L161+84
 2567 0248 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2568 024a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2569 024c 9A42     		cmp	r2, r3
 2570 024e 04D0     		beq	.L117
 215:Src/main.c    ****       process_msg_flag = 1;
 2571              		.loc 1 215 0
 2572 0250 FFF7FEFF 		bl	dequeue
 2573              	.LVL166:
 2574 0254 344B     		ldr	r3, .L161+44
 2575 0256 1860     		str	r0, [r3]
 2576              	.LVL167:
 216:Src/main.c    ****     }
 2577              		.loc 1 216 0
 2578 0258 0124     		movs	r4, #1
 2579              	.LVL168:
 2580              	.L117:
 219:Src/main.c    ****       MIDI_flag = 0;
 2581              		.loc 1 219 0
 2582 025a 3E4B     		ldr	r3, .L161+88
ARM GAS  /tmp/ccn1DpdY.s 			page 69


 2583 025c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2584 025e 002B     		cmp	r3, #0
 2585 0260 3FF419AF 		beq	.L118
 220:Src/main.c    **** 
 2586              		.loc 1 220 0
 2587 0264 0022     		movs	r2, #0
 2588 0266 3B4B     		ldr	r3, .L161+88
 2589 0268 1A70     		strb	r2, [r3]
 222:Src/main.c    ****         uint8_t value = dequeue_byte();
 2590              		.loc 1 222 0
 2591 026a 3B4B     		ldr	r3, .L161+92
 2592 026c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2593 026e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2594 0270 9A42     		cmp	r2, r3
 2595 0272 3FF410AF 		beq	.L118
 2596              	.LBB28:
 223:Src/main.c    **** 
 2597              		.loc 1 223 0
 2598 0276 FFF7FEFF 		bl	dequeue_byte
 2599              	.LVL169:
 225:Src/main.c    ****         case MIDI_NOTE_ON:
 2600              		.loc 1 225 0
 2601 027a 1628     		cmp	r0, #22
 2602 027c 3FF428AF 		beq	.L120
 2603 0280 7FF6FDAE 		bls	.L154
 2604 0284 8028     		cmp	r0, #128
 2605 0286 3FF41BAF 		beq	.L124
 2606 028a 9028     		cmp	r0, #144
 2607 028c 3FF400AF 		beq	.L125
 2608 0290 1728     		cmp	r0, #23
 2609 0292 3FF421AF 		beq	.L155
 2610              	.L119:
 245:Src/main.c    ****         struct midi_msg new_midi_note_msg = {
 2611              		.loc 1 245 0
 2612 0296 234B     		ldr	r3, .L161+40
 2613 0298 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2614 029a 002B     		cmp	r3, #0
 2615 029c 7FF420AF 		bne	.L156
 255:Src/main.c    ****         struct midi_msg new_midi_note_msg = {
 2616              		.loc 1 255 0
 2617 02a0 224B     		ldr	r3, .L161+48
 2618 02a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2619 02a4 002B     		cmp	r3, #0
 2620 02a6 7FF42EAF 		bne	.L157
 265:Src/main.c    ****         struct midi_msg new_cc = {
 2621              		.loc 1 265 0
 2622 02aa 214B     		ldr	r3, .L161+52
 2623 02ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2624 02ae 002B     		cmp	r3, #0
 2625 02b0 7FF43BAF 		bne	.L158
 276:Src/main.c    ****         struct midi_msg new_cc = {
 2626              		.loc 1 276 0
 2627 02b4 1A4B     		ldr	r3, .L161+36
 2628 02b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 02b8 002B     		cmp	r3, #0
 2630 02ba 7FF44AAF 		bne	.L159
 287:Src/main.c    ****         struct midi_msg new_cc = {
ARM GAS  /tmp/ccn1DpdY.s 			page 70


 2631              		.loc 1 287 0
 2632 02be 1D4B     		ldr	r3, .L161+56
 2633 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2634 02c2 002B     		cmp	r3, #0
 2635 02c4 7FF459AF 		bne	.L160
 298:Src/main.c    ****         struct midi_msg new_cc = {
 2636              		.loc 1 298 0
 2637 02c8 1B4B     		ldr	r3, .L161+60
 2638 02ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2639 02cc 002B     		cmp	r3, #0
 2640 02ce 3FF4E2AE 		beq	.L118
 2641              	.LBB22:
 299:Src/main.c    ****           RELEASE_CC,
 2642              		.loc 1 299 0 discriminator 6
 2643 02d2 1723     		movs	r3, #23
 2644 02d4 8DF80030 		strb	r3, [sp]
 301:Src/main.c    ****           0,
 2645              		.loc 1 301 0 discriminator 6
 2646 02d8 184B     		ldr	r3, .L161+64
 2647 02da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299:Src/main.c    ****           RELEASE_CC,
 2648              		.loc 1 299 0 discriminator 6
 2649 02dc 8DF80130 		strb	r3, [sp, #1]
 2650 02e0 0025     		movs	r5, #0
 2651 02e2 8DF80250 		strb	r5, [sp, #2]
 2652 02e6 8DF80350 		strb	r5, [sp, #3]
 305:Src/main.c    ****         release_cc_flag = 0;
 2653              		.loc 1 305 0 discriminator 6
 2654 02ea 0098     		ldr	r0, [sp]
 2655              	.LVL170:
 2656 02ec FFF7FEFF 		bl	enqueue
 2657              	.LVL171:
 306:Src/main.c    ****         UART_PrintADSR();
 2658              		.loc 1 306 0 discriminator 6
 2659 02f0 114B     		ldr	r3, .L161+60
 2660 02f2 1D70     		strb	r5, [r3]
 307:Src/main.c    ****       }
 2661              		.loc 1 307 0 discriminator 6
 2662 02f4 FFF7FEFF 		bl	UART_PrintADSR
 2663              	.LVL172:
 2664              	.LBE22:
 2665 02f8 CDE6     		b	.L118
 2666              	.L162:
 2667 02fa 00BF     		.align	2
 2668              	.L161:
 2669 02fc 00000000 		.word	htim6
 2670 0300 00000000 		.word	htim7
 2671 0304 00000000 		.word	hdac
 2672 0308 00000000 		.word	env_state
 2673 030c 00000000 		.word	.LANCHOR13
 2674 0310 00000000 		.word	.LANCHOR2
 2675 0314 00000000 		.word	.LANCHOR6
 2676 0318 00000000 		.word	.LANCHOR15
 2677 031c 00000000 		.word	huart1
 2678 0320 00000000 		.word	.LANCHOR20
 2679 0324 00000000 		.word	.LANCHOR17
 2680 0328 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/ccn1DpdY.s 			page 71


 2681 032c 00000000 		.word	.LANCHOR18
 2682 0330 00000000 		.word	.LANCHOR19
 2683 0334 00000000 		.word	.LANCHOR21
 2684 0338 00000000 		.word	.LANCHOR22
 2685 033c 00000000 		.word	spi_rx_buffer
 2686 0340 00000000 		.word	.LANCHOR11
 2687 0344 00000000 		.word	.LANCHOR0
 2688 0348 00000000 		.word	.LANCHOR1
 2689 034c 00000000 		.word	hspi5
 2690 0350 00000000 		.word	midi_msg_queue
 2691 0354 00000000 		.word	.LANCHOR14
 2692 0358 00000000 		.word	byte_queue
 2693              	.LVL173:
 2694              	.L135:
 2695              	.LBE28:
 342:Src/main.c    ****         break;
 2696              		.loc 1 342 0
 2697 035c 084B     		ldr	r3, .L163
 2698 035e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2699 0360 084B     		ldr	r3, .L163+4
 2700 0362 1A70     		strb	r2, [r3]
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2701              		.loc 1 321 0
 2702 0364 0024     		movs	r4, #0
 343:Src/main.c    ****       case DECAY_CC:
 2703              		.loc 1 343 0
 2704 0366 57E7     		b	.L132
 2705              	.L133:
 348:Src/main.c    ****         break;
 2706              		.loc 1 348 0
 2707 0368 054B     		ldr	r3, .L163
 2708 036a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2709 036c 064B     		ldr	r3, .L163+8
 2710 036e 1A70     		strb	r2, [r3]
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2711              		.loc 1 321 0
 2712 0370 0024     		movs	r4, #0
 349:Src/main.c    ****       case RELEASE_CC:
 2713              		.loc 1 349 0
 2714 0372 51E7     		b	.L132
 2715              	.L150:
 351:Src/main.c    ****         break;
 2716              		.loc 1 351 0
 2717 0374 024B     		ldr	r3, .L163
 2718 0376 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2719 0378 044B     		ldr	r3, .L163+12
 2720 037a 1A70     		strb	r2, [r3]
 321:Src/main.c    ****       switch(current_midi_msg.byte0) {
 2721              		.loc 1 321 0
 2722 037c 0024     		movs	r4, #0
 352:Src/main.c    **** 
 2723              		.loc 1 352 0
 2724 037e 4BE7     		b	.L132
 2725              	.L164:
 2726              		.align	2
 2727              	.L163:
 2728 0380 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/ccn1DpdY.s 			page 72


 2729 0384 00000000 		.word	.LANCHOR9
 2730 0388 00000000 		.word	.LANCHOR10
 2731 038c 00000000 		.word	.LANCHOR12
 2732              		.cfi_endproc
 2733              	.LFE130:
 2735              		.section	.text.Error_Handler,"ax",%progbits
 2736              		.align	1
 2737              		.global	Error_Handler
 2738              		.syntax unified
 2739              		.thumb
 2740              		.thumb_func
 2741              		.fpu fpv4-sp-d16
 2743              	Error_Handler:
 2744              	.LFB150:
1130:Src/main.c    **** 
1131:Src/main.c    **** /* USER CODE END 4 */
1132:Src/main.c    **** 
1133:Src/main.c    **** /**
1134:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1135:Src/main.c    ****   * @retval None
1136:Src/main.c    ****   */
1137:Src/main.c    **** void Error_Handler(void)
1138:Src/main.c    **** {
 2745              		.loc 1 1138 0
 2746              		.cfi_startproc
 2747              		@ args = 0, pretend = 0, frame = 0
 2748              		@ frame_needed = 0, uses_anonymous_args = 0
 2749              		@ link register save eliminated.
 2750 0000 7047     		bx	lr
 2751              		.cfi_endproc
 2752              	.LFE150:
 2754              		.global	release
 2755              		.global	sustain
 2756              		.global	decay
 2757              		.global	attack
 2758              		.comm	byte_queue,257,4
 2759              		.comm	midi_msg_queue,1022,4
 2760              		.global	MIDI_flag
 2761              		.global	update_value_flag
 2762              		.global	lfo
 2763              		.global	lfo_freq
 2764              		.global	lfo_phase_accumulator
 2765              		.global	note_freq
 2766              		.global	note_on
 2767              		.comm	env_state,16,4
 2768              		.global	envelope
 2769              		.global	envelope_index
 2770              		.global	output_val
 2771              		.global	phase_accumulator
 2772              		.global	current_midi_msg
 2773              		.global	release_cc_flag
 2774              		.global	sustain_cc_flag
 2775              		.global	decay_cc_flag
 2776              		.global	attack_cc_flag
 2777              		.global	note_off_flag
 2778              		.global	note_on_flag
 2779              		.global	inv_voices
ARM GAS  /tmp/ccn1DpdY.s 			page 73


 2780              		.comm	spi_rx_buffer,3,4
 2781              		.comm	spi_tx_buffer,3,4
 2782              		.comm	huart1,64,4
 2783              		.comm	htim7,64,4
 2784              		.comm	htim6,64,4
 2785              		.comm	hspi5,88,4
 2786              		.comm	hdac,20,4
 2787              		.comm	lfo_sine,256,4
 2788              		.comm	base_sq,4096,4
 2789              		.comm	base_tri,4096,4
 2790              		.comm	base_neg_saw,4096,4
 2791              		.comm	base_pos_saw,4096,4
 2792              		.comm	base_sine,4096,4
 2793              		.section	.rodata
 2794              		.align	2
 2795              		.set	.LANCHOR15,. + 0
 2796              	.LC0:
 2797 0000 0A53544D 		.ascii	"\012STM32F429!\012\000"
 2797      33324634 
 2797      3239210A 
 2797      00
 2798 000d 00000000 		.space	7
 2798      000000
 2799              		.section	.bss.MIDI_flag,"aw",%nobits
 2800              		.set	.LANCHOR14,. + 0
 2803              	MIDI_flag:
 2804 0000 00       		.space	1
 2805              		.section	.bss.attack_cc_flag,"aw",%nobits
 2806              		.set	.LANCHOR19,. + 0
 2809              	attack_cc_flag:
 2810 0000 00       		.space	1
 2811              		.section	.bss.current_midi_msg,"aw",%nobits
 2812              		.align	2
 2813              		.set	.LANCHOR16,. + 0
 2816              	current_midi_msg:
 2817 0000 00000000 		.space	4
 2818              		.section	.bss.decay_cc_flag,"aw",%nobits
 2819              		.set	.LANCHOR20,. + 0
 2822              	decay_cc_flag:
 2823 0000 00       		.space	1
 2824              		.section	.bss.envelope,"aw",%nobits
 2825              		.align	2
 2826              		.set	.LANCHOR4,. + 0
 2829              	envelope:
 2830 0000 00000000 		.space	64
 2830      00000000 
 2830      00000000 
 2830      00000000 
 2830      00000000 
 2831              		.section	.bss.envelope_index,"aw",%nobits
 2832              		.align	2
 2833              		.set	.LANCHOR8,. + 0
 2836              	envelope_index:
 2837 0000 00000000 		.space	64
 2837      00000000 
 2837      00000000 
 2837      00000000 
ARM GAS  /tmp/ccn1DpdY.s 			page 74


 2837      00000000 
 2838              		.section	.bss.lfo,"aw",%nobits
 2839              		.align	2
 2840              		.set	.LANCHOR5,. + 0
 2843              	lfo:
 2844 0000 00000000 		.space	16
 2844      00000000 
 2844      00000000 
 2844      00000000 
 2845              		.section	.bss.lfo_freq,"aw",%nobits
 2846              		.align	2
 2847              		.set	.LANCHOR6,. + 0
 2850              	lfo_freq:
 2851 0000 00000000 		.space	32
 2851      00000000 
 2851      00000000 
 2851      00000000 
 2851      00000000 
 2852              		.section	.bss.lfo_phase_accumulator,"aw",%nobits
 2853              		.align	2
 2854              		.set	.LANCHOR7,. + 0
 2857              	lfo_phase_accumulator:
 2858 0000 00000000 		.space	64
 2858      00000000 
 2858      00000000 
 2858      00000000 
 2858      00000000 
 2859              		.section	.bss.note_freq,"aw",%nobits
 2860              		.align	2
 2861              		.set	.LANCHOR2,. + 0
 2864              	note_freq:
 2865 0000 00000000 		.space	16
 2865      00000000 
 2865      00000000 
 2865      00000000 
 2866              		.section	.bss.note_off_flag,"aw",%nobits
 2867              		.set	.LANCHOR18,. + 0
 2870              	note_off_flag:
 2871 0000 00       		.space	1
 2872              		.section	.bss.note_on,"aw",%nobits
 2873              		.align	2
 2874              		.set	.LANCHOR13,. + 0
 2877              	note_on:
 2878 0000 00000000 		.space	88
 2878      00000000 
 2878      00000000 
 2878      00000000 
 2878      00000000 
 2879              		.section	.bss.note_on_flag,"aw",%nobits
 2880              		.set	.LANCHOR17,. + 0
 2883              	note_on_flag:
 2884 0000 00       		.space	1
 2885              		.section	.bss.output_val,"aw",%nobits
 2886              		.set	.LANCHOR1,. + 0
 2889              	output_val:
 2890 0000 00       		.space	1
 2891              		.section	.bss.phase_accumulator,"aw",%nobits
ARM GAS  /tmp/ccn1DpdY.s 			page 75


 2892              		.align	2
 2893              		.set	.LANCHOR3,. + 0
 2896              	phase_accumulator:
 2897 0000 00000000 		.space	64
 2897      00000000 
 2897      00000000 
 2897      00000000 
 2897      00000000 
 2898              		.section	.bss.release_cc_flag,"aw",%nobits
 2899              		.set	.LANCHOR22,. + 0
 2902              	release_cc_flag:
 2903 0000 00       		.space	1
 2904              		.section	.bss.sustain_cc_flag,"aw",%nobits
 2905              		.set	.LANCHOR21,. + 0
 2908              	sustain_cc_flag:
 2909 0000 00       		.space	1
 2910              		.section	.bss.update_value_flag,"aw",%nobits
 2911              		.set	.LANCHOR0,. + 0
 2914              	update_value_flag:
 2915 0000 00       		.space	1
 2916              		.section	.data.attack,"aw",%progbits
 2917              		.set	.LANCHOR9,. + 0
 2920              	attack:
 2921 0000 FF       		.byte	-1
 2922              		.section	.data.decay,"aw",%progbits
 2923              		.set	.LANCHOR11,. + 0
 2926              	decay:
 2927 0000 FF       		.byte	-1
 2928              		.section	.data.release,"aw",%progbits
 2929              		.set	.LANCHOR12,. + 0
 2932              	release:
 2933 0000 FF       		.byte	-1
 2934              		.section	.data.sustain,"aw",%progbits
 2935              		.set	.LANCHOR10,. + 0
 2938              	sustain:
 2939 0000 C8       		.byte	-56
 2940              		.section	.rodata.inv_voices,"a",%progbits
 2941              		.align	2
 2944              	inv_voices:
 2945 0000 0000803D 		.word	1031798784
 2946              		.text
 2947              	.Letext0:
 2948              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2949              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2950              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2951              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2952              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 2953              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2954              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2955              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2956              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2957              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2958              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dac.h"
 2959              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 2960              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2961              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2962              		.file 16 "Inc/midi.h"
ARM GAS  /tmp/ccn1DpdY.s 			page 76


 2963              		.file 17 "/usr/include/newlib/sys/lock.h"
 2964              		.file 18 "/usr/include/newlib/sys/_types.h"
 2965              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2966              		.file 20 "/usr/include/newlib/sys/reent.h"
 2967              		.file 21 "/usr/include/newlib/stdlib.h"
 2968              		.file 22 "Inc/waves.h"
 2969              		.file 23 "/usr/include/newlib/math.h"
 2970              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 2971              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccn1DpdY.s 			page 77


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccn1DpdY.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccn1DpdY.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccn1DpdY.s:485    .text.MX_GPIO_Init:00000000000002c0 $d
     /tmp/ccn1DpdY.s:496    .text.MX_GPIO_Init:00000000000002e4 $t
     /tmp/ccn1DpdY.s:624    .text.MX_GPIO_Init:00000000000003a0 $d
     /tmp/ccn1DpdY.s:634    .text.MX_SPI5_Init:0000000000000000 $t
     /tmp/ccn1DpdY.s:640    .text.MX_SPI5_Init:0000000000000000 MX_SPI5_Init
     /tmp/ccn1DpdY.s:684    .text.MX_SPI5_Init:0000000000000028 $d
                            *COM*:0000000000000058 hspi5
     /tmp/ccn1DpdY.s:690    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccn1DpdY.s:696    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccn1DpdY.s:735    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccn1DpdY.s:741    .text.MX_DAC_Init:0000000000000000 $t
     /tmp/ccn1DpdY.s:747    .text.MX_DAC_Init:0000000000000000 MX_DAC_Init
     /tmp/ccn1DpdY.s:793    .text.MX_DAC_Init:0000000000000028 $d
                            *COM*:0000000000000014 hdac
     /tmp/ccn1DpdY.s:799    .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccn1DpdY.s:805    .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccn1DpdY.s:859    .text.MX_TIM6_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim6
     /tmp/ccn1DpdY.s:865    .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccn1DpdY.s:871    .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccn1DpdY.s:925    .text.MX_TIM7_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim7
     /tmp/ccn1DpdY.s:931    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccn1DpdY.s:938    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccn1DpdY.s:1046   .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccn1DpdY.s:1052   .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccn1DpdY.s:1059   .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccn1DpdY.s:1072   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccn1DpdY.s:1079   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccn1DpdY.s:1104   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccn1DpdY.s:1113   .text.UpdateOutputValue:0000000000000000 $t
     /tmp/ccn1DpdY.s:1120   .text.UpdateOutputValue:0000000000000000 UpdateOutputValue
     /tmp/ccn1DpdY.s:1224   .text.UpdateOutputValue:00000000000000a8 $d
                            *COM*:0000000000001000 base_sine
     /tmp/ccn1DpdY.s:1241   .text.UpdateLFOs:0000000000000000 $t
     /tmp/ccn1DpdY.s:1248   .text.UpdateLFOs:0000000000000000 UpdateLFOs
     /tmp/ccn1DpdY.s:1300   .text.UpdateLFOs:0000000000000040 $d
     /tmp/ccn1DpdY.s:1309   .text.UpdateEnvelope:0000000000000000 $t
     /tmp/ccn1DpdY.s:1316   .text.UpdateEnvelope:0000000000000000 UpdateEnvelope
     /tmp/ccn1DpdY.s:1363   .text.UpdateEnvelope:0000000000000030 $d
     /tmp/ccn1DpdY.s:1368   .text.UpdateEnvelope:0000000000000044 $t
     /tmp/ccn1DpdY.s:1522   .text.UpdateEnvelope:0000000000000180 $d
                            *COM*:0000000000000010 env_state
                            *COM*:0000000000001000 base_pos_saw
                            *COM*:0000000000001000 base_neg_saw
     /tmp/ccn1DpdY.s:1541   .text.Update_R2R_DAC:0000000000000000 $t
     /tmp/ccn1DpdY.s:1548   .text.Update_R2R_DAC:0000000000000000 Update_R2R_DAC
     /tmp/ccn1DpdY.s:1722   .text.Update_R2R_DAC:0000000000000120 $d
     /tmp/ccn1DpdY.s:1728   .text.UART_PrintADSR:0000000000000000 $t
     /tmp/ccn1DpdY.s:1735   .text.UART_PrintADSR:0000000000000000 UART_PrintADSR
     /tmp/ccn1DpdY.s:1844   .text.UART_PrintADSR:00000000000000a0 $d
     /tmp/ccn1DpdY.s:1853   .text.enqueue:0000000000000000 $t
ARM GAS  /tmp/ccn1DpdY.s 			page 78


     /tmp/ccn1DpdY.s:1860   .text.enqueue:0000000000000000 enqueue
     /tmp/ccn1DpdY.s:1886   .text.enqueue:0000000000000018 $d
                            *COM*:00000000000003fe midi_msg_queue
     /tmp/ccn1DpdY.s:1891   .text.dequeue:0000000000000000 $t
     /tmp/ccn1DpdY.s:1898   .text.dequeue:0000000000000000 dequeue
     /tmp/ccn1DpdY.s:1934   .text.dequeue:0000000000000038 $d
     /tmp/ccn1DpdY.s:1939   .text.enqueue_byte:0000000000000000 $t
     /tmp/ccn1DpdY.s:1946   .text.enqueue_byte:0000000000000000 enqueue_byte
     /tmp/ccn1DpdY.s:1965   .text.enqueue_byte:0000000000000010 $d
                            *COM*:0000000000000101 byte_queue
     /tmp/ccn1DpdY.s:1970   .text.HAL_SPI_TxRxCpltCallback:0000000000000000 $t
     /tmp/ccn1DpdY.s:1977   .text.HAL_SPI_TxRxCpltCallback:0000000000000000 HAL_SPI_TxRxCpltCallback
     /tmp/ccn1DpdY.s:2076   .text.HAL_SPI_TxRxCpltCallback:0000000000000078 $d
                            *COM*:0000000000000003 spi_rx_buffer
     /tmp/ccn1DpdY.s:2083   .text.dequeue_byte:0000000000000000 $t
     /tmp/ccn1DpdY.s:2090   .text.dequeue_byte:0000000000000000 dequeue_byte
     /tmp/ccn1DpdY.s:2109   .text.dequeue_byte:0000000000000010 $d
     /tmp/ccn1DpdY.s:2114   .text.main:0000000000000000 $t
     /tmp/ccn1DpdY.s:2121   .text.main:0000000000000000 main
     /tmp/ccn1DpdY.s:2669   .text.main:00000000000002fc $d
     /tmp/ccn1DpdY.s:2697   .text.main:000000000000035c $t
     /tmp/ccn1DpdY.s:2728   .text.main:0000000000000380 $d
     /tmp/ccn1DpdY.s:2736   .text.Error_Handler:0000000000000000 $t
     /tmp/ccn1DpdY.s:2743   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccn1DpdY.s:2932   .data.release:0000000000000000 release
     /tmp/ccn1DpdY.s:2938   .data.sustain:0000000000000000 sustain
     /tmp/ccn1DpdY.s:2926   .data.decay:0000000000000000 decay
     /tmp/ccn1DpdY.s:2920   .data.attack:0000000000000000 attack
     /tmp/ccn1DpdY.s:2803   .bss.MIDI_flag:0000000000000000 MIDI_flag
     /tmp/ccn1DpdY.s:2914   .bss.update_value_flag:0000000000000000 update_value_flag
     /tmp/ccn1DpdY.s:2843   .bss.lfo:0000000000000000 lfo
     /tmp/ccn1DpdY.s:2850   .bss.lfo_freq:0000000000000000 lfo_freq
     /tmp/ccn1DpdY.s:2857   .bss.lfo_phase_accumulator:0000000000000000 lfo_phase_accumulator
     /tmp/ccn1DpdY.s:2864   .bss.note_freq:0000000000000000 note_freq
     /tmp/ccn1DpdY.s:2877   .bss.note_on:0000000000000000 note_on
     /tmp/ccn1DpdY.s:2829   .bss.envelope:0000000000000000 envelope
     /tmp/ccn1DpdY.s:2836   .bss.envelope_index:0000000000000000 envelope_index
     /tmp/ccn1DpdY.s:2889   .bss.output_val:0000000000000000 output_val
     /tmp/ccn1DpdY.s:2896   .bss.phase_accumulator:0000000000000000 phase_accumulator
     /tmp/ccn1DpdY.s:2816   .bss.current_midi_msg:0000000000000000 current_midi_msg
     /tmp/ccn1DpdY.s:2902   .bss.release_cc_flag:0000000000000000 release_cc_flag
     /tmp/ccn1DpdY.s:2908   .bss.sustain_cc_flag:0000000000000000 sustain_cc_flag
     /tmp/ccn1DpdY.s:2822   .bss.decay_cc_flag:0000000000000000 decay_cc_flag
     /tmp/ccn1DpdY.s:2809   .bss.attack_cc_flag:0000000000000000 attack_cc_flag
     /tmp/ccn1DpdY.s:2870   .bss.note_off_flag:0000000000000000 note_off_flag
     /tmp/ccn1DpdY.s:2883   .bss.note_on_flag:0000000000000000 note_on_flag
     /tmp/ccn1DpdY.s:2944   .rodata.inv_voices:0000000000000000 inv_voices
                            *COM*:0000000000000003 spi_tx_buffer
                            *COM*:0000000000000100 lfo_sine
                            *COM*:0000000000001000 base_sq
                            *COM*:0000000000001000 base_tri
     /tmp/ccn1DpdY.s:2794   .rodata:0000000000000000 $d
     /tmp/ccn1DpdY.s:2804   .bss.MIDI_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2810   .bss.attack_cc_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2812   .bss.current_midi_msg:0000000000000000 $d
     /tmp/ccn1DpdY.s:2823   .bss.decay_cc_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2825   .bss.envelope:0000000000000000 $d
ARM GAS  /tmp/ccn1DpdY.s 			page 79


     /tmp/ccn1DpdY.s:2832   .bss.envelope_index:0000000000000000 $d
     /tmp/ccn1DpdY.s:2839   .bss.lfo:0000000000000000 $d
     /tmp/ccn1DpdY.s:2846   .bss.lfo_freq:0000000000000000 $d
     /tmp/ccn1DpdY.s:2853   .bss.lfo_phase_accumulator:0000000000000000 $d
     /tmp/ccn1DpdY.s:2860   .bss.note_freq:0000000000000000 $d
     /tmp/ccn1DpdY.s:2871   .bss.note_off_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2873   .bss.note_on:0000000000000000 $d
     /tmp/ccn1DpdY.s:2884   .bss.note_on_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2890   .bss.output_val:0000000000000000 $d
     /tmp/ccn1DpdY.s:2892   .bss.phase_accumulator:0000000000000000 $d
     /tmp/ccn1DpdY.s:2903   .bss.release_cc_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2909   .bss.sustain_cc_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2915   .bss.update_value_flag:0000000000000000 $d
     /tmp/ccn1DpdY.s:2941   .rodata.inv_voices:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_UART_Init
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
__aeabi_dmul
__aeabi_d2uiz
midi_notes
__aeabi_i2d
HAL_UART_Transmit
HAL_Init
init_wavetable
HAL_TIM_Base_Start_IT
HAL_DAC_Start
HAL_DAC_SetValue
Receive_MIDI
